{"version":3,"file":"static/js/290.6269202a.chunk.js","mappings":"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","sources":["lib/optimizerCore.js","workers/optimizer.worker.js"],"sourcesContent":["// src/lib/optimizerCore.js\r\n/* =============================== 타입(주석용 정의) =============================== */\r\n/** @typedef {\"dealer\"|\"support\"} Role */\r\n/** @typedef {\"atk\"|\"add\"|\"boss\"|\"brand\"|\"allyDmg\"|\"allyAtk\"} OptionKey */\r\n/** @typedef {\"HERO\"|\"LEGEND\"|\"RELIC\"|\"ANCIENT\"} CoreGrade */\r\n/** @typedef {{id:string, will:number|null, point:number|null, o1k:OptionKey, o1v:number|null, o2k:OptionKey, o2v:number|null}} Gem */\r\n/** @typedef {{[k in OptionKey]: number}} Weights */\r\n/** @typedef {{ id:string, name:string, grade:CoreGrade, minThreshold?:number, enforceMin:boolean, supply?: number }} CoreDef */\r\n/** @typedef {{ list: Gem[], totalWill:number, totalPoint:number, thr:number[], roleSum:number, score:number }} ComboInfo */\r\n\r\n/* =============================== 상수 정의 =============================== */\r\n// 기본값(미선택 시 사용)\r\nexport const CORE_SUPPLY = { HERO: 7, LEGEND: 11, RELIC: 15, ANCIENT: 17 };\r\n// 등급별 “선택 가능한 공급 의지력” 목록\r\nexport const CORE_SUPPLY_OPTIONS = {\r\n  HERO: [7, 9],\r\n  LEGEND: [11, 12],\r\n  RELIC: [15],\r\n  ANCIENT: [17],\r\n};\r\nexport const CORE_POINT_CAP = { HERO: 13, LEGEND: 16, RELIC: 20, ANCIENT: 20 };\r\nexport const CORE_THRESHOLDS = {\r\n  HERO: [10],\r\n  LEGEND: [10, 14],\r\n  RELIC: [10, 14, 17, 18, 19, 20],\r\n  ANCIENT: [10, 14, 17, 18, 19, 20],\r\n};\r\nexport const CORE_LABEL = { HERO: \"영웅\", LEGEND: \"전설\", RELIC: \"유물\", ANCIENT: \"고대\" };\r\nexport const GRADES = [\"HERO\", \"LEGEND\", \"RELIC\", \"ANCIENT\"];\r\nexport const OPTION_LABELS = {\r\n  atk: \"공격력\",\r\n  add: \"추가 피해\",\r\n  boss: \"보스 피해\",\r\n  brand: \"낙인력\",\r\n  allyDmg: \"아군 피해 강화\",\r\n  allyAtk: \"아군 공격 강화\",\r\n};\r\nexport const OPTIONS = [\"atk\", \"add\", \"boss\", \"brand\", \"allyDmg\", \"allyAtk\"];\r\nexport const ROLE_KEYS = {\r\n  dealer: new Set([\"atk\", \"add\", \"boss\"]),\r\n  support: new Set([\"brand\", \"allyDmg\", \"allyAtk\"]),\r\n};\r\n\r\n/** 딜러 프리셋(가중치; 배율) */\r\nexport const DEALER_WEIGHTS = {\r\n  boss: 1,\r\n  add: 1,\r\n  atk: 1,\r\n  brand: 0,\r\n  allyDmg: 0,\r\n  allyAtk: 0,\r\n};\r\n/** 기본 가중치는 = 딜러 프리셋 */\r\nexport const DEFAULT_WEIGHTS = { ...DEALER_WEIGHTS };\r\n\r\n/** 딜러: 옵션 레벨 → 퍼센트 커브 */\r\nexport const DEALER_LEVEL_CURVES = {\r\n  // key 는 OPTIONS 의 실제 키와 일치해야 합니다.\r\n  boss: [0, 0.078, 0.156, 0.244, 0.313, 0.391], // 보스 피해\r\n  add:  [0, 0.060, 0.119, 0.187, 0.239, 0.299], // 추가 피해\r\n  atk:  [0, 0.029, 0.067, 0.105, 0.134, 0.172], // 공격력\r\n};\r\n\r\n/** 서포터: 옵션 레벨 → 유효율(커브) */\r\nexport const SUPPORT_LEVEL_CURVES = {\r\n  // 낙인력\r\n  brand:   [0, 0.167, 0.334, 0.501, 0.668, 0.835],\r\n  // 아군 공격 강화\r\n  allyAtk: [0, 0.130, 0.260, 0.390, 0.520, 0.650],\r\n  // 아군 피해 강화\r\n  allyDmg: [0, 0.052, 0.104, 0.156, 0.208, 0.260],\r\n};\r\n\r\n/* =============================== 유틸/헬퍼 =============================== */\r\nexport function roleAllowsKey(role, key) {\r\n  const allow = ROLE_KEYS?.[role];\r\n  if (!allow) return true;                               // 미정의면 모두 허용\r\n  if (Array.isArray(allow)) return allow.includes(key);  // 배열\r\n  if (allow && typeof allow.has === 'function') return allow.has(key); // Set\r\n  if (allow && typeof allow === 'object') return !!allow[key]; // { atk:true } 객체\r\n  return true;\r\n}\r\n\r\nexport function sanitizeWeights(w) {\r\n  const base = { ...DEFAULT_WEIGHTS };\r\n  if (!w) return base;\r\n  Object.keys(base).forEach((k) => {\r\n    const raw = w[k];\r\n    const num = typeof raw === 'number' ? raw : Number(raw);\r\n    base[k] = Number.isFinite(num) && num >= 0 ? num : DEFAULT_WEIGHTS[k];\r\n  });\r\n  return /** @type {Weights} */(base);\r\n}\r\n\r\nexport function levelValueByRole(role, key, lvl) {\r\n  const L = Math.max(0, Math.min(5, Number(lvl) || 0));\r\n\r\n  // 딜러: 사전 정의된 퍼센트 커브\r\n  if (role === 'dealer' && DEALER_LEVEL_CURVES[key]) {\r\n    return DEALER_LEVEL_CURVES[key][L] || 0;\r\n  }\r\n\r\n  // 서포터: 사전 정의된 유효율 커브\r\n  if (role === 'support' && SUPPORT_LEVEL_CURVES[key]) {\r\n    return SUPPORT_LEVEL_CURVES[key][L] || 0;\r\n  }\r\n\r\n  // 그 외: 선형(레벨 숫자 그대로)\r\n  return L;\r\n}\r\n\r\nexport function scoreGemForRole(gem, role, weights) {\r\n  const w = sanitizeWeights(weights || {});\r\n  let sum = 0;\r\n\r\n  const add = (key, lvl) => {\r\n    if (!key || !lvl) return;\r\n    if (role && !roleAllowsKey(role, key)) return;\r\n\r\n    const basePct = levelValueByRole(role, key, lvl); // 레벨→퍼센트(커브/선형)\r\n    const scale   = w[key] ?? 0;                      // 가중치(배율)\r\n    sum += basePct * scale;\r\n  };\r\n\r\n  add(gem.o1k, gem.o1v);\r\n  add(gem.o2k, gem.o2v);\r\n\r\n  // 퍼센트 값으로 반환 (상위 UI에서 toFixed(4) + '%' 처리)\r\n  return sum;\r\n}\r\n\r\nexport function* combinations(arr, k) {\r\n  const n = arr.length; if (k > n) return;\r\n  const idx = Array.from({ length: k }, (_, i) => i);\r\n  while (true) {\r\n    yield idx.map(i => arr[i]);\r\n    let p = k - 1;\r\n    while (p >= 0 && idx[p] === n - k + p) p--;\r\n    if (p < 0) break;\r\n    idx[p]++;\r\n    for (let j = p + 1; j < k; j++) idx[j] = idx[j - 1] + 1;\r\n  }\r\n}\r\n\r\nexport function thresholdsHit(grade, totalPoint) {\r\n  const th = CORE_THRESHOLDS[grade];\r\n  return th.filter(t => totalPoint >= t);\r\n}\r\n\r\nexport function scoreCombo(combo, grade, role, weights) {\r\n  const totalWill = combo.reduce((s, g) => s + ((g.will ?? 0)), 0);\r\n  const totalPoint = combo.reduce((s, g) => s + ((g.point ?? 0)), 0);\r\n  const thr = thresholdsHit(grade, totalPoint);\r\n  const roleSum = combo.reduce((s, g) => s + scoreGemForRole(g, role, weights), 0);\r\n  const score = (thr.length * 10_000_000)\r\n    + (totalPoint * 10_000)\r\n    + ((5_000 - totalWill) * 10)\r\n    + roleSum\r\n    - combo.length;\r\n  return { totalWill, totalPoint, thr, roleSum, score };\r\n}\r\n\r\n// --- helpers for fallback by TOTAL POINT ---\r\nconst thrMaxOf = (ci) => (ci?.thr?.length ? Math.max(...ci.thr) : -Infinity);\r\n\r\n/**\r\n * 선택한 포인트 p(예: 14)로 정확히 맞는 조합이 없으면\r\n * 총 포인트를 p+1, p+2 … 식으로 올려가며 첫 매칭 세트를 반환.\r\n * (임계치 드롭다운은 건드리지 않음)\r\n */\r\nfunction pickByPointExactThenUp(all, grade, startPoint) {\r\n  const maxP = CORE_POINT_CAP?.[grade] ?? startPoint;\r\n  for (let p = startPoint; p <= maxP; p += 1) {\r\n    const hits = all.filter(ci =>\r\n      ci?.list?.length > 0 &&\r\n      Number.isFinite(ci?.totalPoint) &&\r\n      ci.totalPoint === p\r\n    );\r\n    if (hits.length) return hits;\r\n  }\r\n  return [];\r\n}\r\n\r\n\r\n/* 단일 코어 후보 산출 (통일 정책: 달성 구간이 없으면 결과 없음) */\r\nexport function enumerateCoreCombos(\r\n  pool, grade, role, weights, minThreshold, enforceMin, onStep, supplyOverride\r\n) {\r\n  const supply = (supplyOverride ?? CORE_SUPPLY[grade]);\r\n  const pointCap = (CORE_POINT_CAP?.[grade] ?? Infinity);\r\n  const W = sanitizeWeights(weights);\r\n\r\n  /** @type {ComboInfo[]} */\r\n  const all = [];\r\n  const maxPick = Math.min(4, pool.length);\r\n\r\n  for (let k = 0; k <= maxPick; k++) {\r\n    if (k === 0) {\r\n      all.push({ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 });\r\n      continue;\r\n    }\r\n    for (const combo of combinations(pool, k)) {\r\n      onStep && onStep(1);\r\n      const totalWill = combo.reduce((s, g) => s + (g.will || 0), 0);\r\n      if (totalWill > supply) continue;\r\n      const { totalPoint, thr, roleSum, score } = scoreCombo(combo, grade, role, W);\r\n      // ✅ 등급별 최대 포인트 초과 조합은 제외 (예: 전설은 14P 초과 금지)\r\n      if (totalPoint > pointCap) continue;\r\n      all.push({ list: combo, totalWill, totalPoint, thr, roleSum, score });\r\n    }\r\n  }\r\n\r\n  all.sort((a, b) => b.score - a.score);\r\n\r\n  // UI 정책에 맞춘 필터링\r\n  let filtered;\r\n  if (enforceMin) {\r\n    // 강제(ON): '선택 임계치 이상(≥)'인 조합 허용\r\n    const need = Number.isFinite(minThreshold) ? minThreshold : -Infinity;\r\n    filtered = all.filter(ci =>\r\n      ci.list?.length > 0 &&\r\n      ci.thr?.length > 0 &&\r\n      thrMaxOf(ci) >= need\r\n    );\r\n  } else {\r\n    // 정확 매칭 모드(OFF):\r\n    //    1) minThreshold 있으면: '총 포인트 == 선택값' 우선 → 없으면 총 포인트를 +1씩 올리며 탐색\r\n    //    2) minThreshold 없으면: 임계치(=효과) 한 개라도 달성한 조합만\r\n    if (Number.isFinite(minThreshold)) {\r\n      const hits = pickByPointExactThenUp(all, grade, minThreshold);\r\n      filtered = hits.length ? hits : [];\r\n    } else {\r\n      filtered = all.filter(ci => ci.list?.length > 0 && ci.thr?.length > 0);\r\n    }\r\n  }\r\n\r\n  if (filtered.length === 0) {\r\n    return [{ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 }];\r\n  }\r\n\r\n  return filtered;\r\n}\r\n","// src/workers/optimizer.worker.js\r\n/* eslint-env worker, es2020 */\r\nimport { enumerateCoreCombos, CORE_THRESHOLDS, sanitizeWeights } from \"../lib/optimizerCore.js\";\r\n\r\nconst thrMax = (ci) => (ci?.thr?.length ? Math.max(...ci.thr) : 0);\r\nconst minOf = (g) => Math.min(...CORE_THRESHOLDS[g]);\r\nconst now = () => (globalThis.performance?.now?.() ?? Date.now());\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nfunction clash(pick, usedSet) {\r\n  for (const g of pick.list) if (usedSet.has(g.id)) return true;\r\n  return false;\r\n}\r\n\r\n// emit을 너무 자주 보내지 않도록 간단 throttle\r\nfunction makeThrottledEmit(emit, minMs = 16) {\r\n  let last = 0;\r\n  return (payload, force = false) => {\r\n    const t = now();\r\n    if (force || t - last >= minMs) {\r\n      last = t;\r\n      emit(payload);\r\n    }\r\n  };\r\n}\r\n\r\n// 정렬 comparator를 루프 밖으로 (ESLint 안정성/성능)\r\nconst comboCmp = (a, b) => {\r\n  const ta = thrMax(a), tb = thrMax(b);\r\n  if (ta !== tb) return tb - ta;\r\n  if (a.totalPoint !== b.totalPoint) return b.totalPoint - a.totalPoint;\r\n  if (a.roleSum !== b.roleSum) return b.roleSum - a.roleSum;\r\n  return a.totalWill - b.totalWill;\r\n};\r\n\r\n/**\r\n* 후보 생성: 코어별로 프레임 양보하면서 진행 브로드캐스트\r\n* - gen 단계는 전체 후보 조합 수를 알 수 있으니 **결정형 퍼센트(done/total)** 제공\r\n* - 동시에 코어별 상세(코어 n/m, x/y, 속도/ETA)도 함께 전송\r\n*/\r\nasync function buildAllCandidates({ cores, pool, role, weights, perCoreLimit, emitOverall }) {\r\n  const n = pool.length;\r\n  const maxPick = Math.min(4, n);\r\n\r\n  const nCk = (N, K) => {\r\n    let c = 1;\r\n    for (let i = 1; i <= K; i++) c = (c * (N - i + 1)) / i;\r\n    return Math.floor(c);\r\n  };\r\n\r\n  // 한 코어당 이론상 생성할 조합 개수(1~4개 선택 합)\r\n  const totalCombosPerCore = Array.from({ length: maxPick }, (_, i) => nCk(n, i + 1))\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  // 전체(gen) 퍼센트용 총량\r\n  const totalGenAll = totalCombosPerCore * cores.length;\r\n\r\n  let doneCombos = 0;\r\n  const candidatesPerCore = [];\r\n\r\n  const state = {\r\n    coreIndex: 0,\r\n    coreCount: cores.length,\r\n    coreDone: 0,\r\n    coreTotal: 0,\r\n    t0: 0,\r\n  };\r\n\r\n  // 루프 밖 단일 onTick (ESLint no-loop-func 대응)\r\n  const onTick = () => {\r\n    // 전역(doneCombos) & 코어별 진행 증가\r\n    doneCombos += 1;\r\n    state.coreDone += 1;\r\n\r\n    const elapsedMs = now() - state.t0;\r\n    const showSpeed = elapsedMs >= 250 && state.coreDone >= Math.min(1000, state.coreTotal * 0.05);\r\n    const rate = showSpeed ? (state.coreDone / (elapsedMs / 1000)) : null;\r\n    const etaMs = showSpeed && rate ? Math.max(0, (state.coreTotal - state.coreDone) / rate) * 1000 : null;\r\n\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${cores[state.coreIndex - 1]?.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,        // ✅ 결정형\r\n      done: doneCombos,          // ✅ 전체(gen) 진행수\r\n      total: totalGenAll,         // ✅ 전체(gen) 총량\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal,\r\n      rate, elapsedMs, etaMs\r\n    });\r\n  };\r\n\r\n  // 코어별로 순차 생성 + 프레임 양보\r\n  for (let idx = 0; idx < cores.length; idx++) {\r\n    const core = cores[idx];\r\n\r\n    state.coreIndex = idx + 1;\r\n    state.coreDone = 0;\r\n    state.coreTotal = totalCombosPerCore; // 동일 풀 기준 이론 총량\r\n    state.t0 = now();\r\n\r\n    // 시작 알림 (렌더 기회) — 결정형 퍼센트 0%에서 시작\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n\r\n    const list = enumerateCoreCombos(\r\n       pool, core.grade, role, weights, core.minThreshold, core.enforceMin, onTick, core.supply\r\n    )\r\n      .filter((ci) => ci.list.length > 0 && ci.thr.length > 0)\r\n      .sort(comboCmp)\r\n      .slice(0, perCoreLimit);\r\n\r\n    candidatesPerCore[idx] = list;\r\n\r\n    // 코어 종료 스냅샷(강제 1회) + 프레임 양보\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreTotal,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n  }\r\n\r\n  return { candidatesPerCore, totalGenAll, doneCombos };\r\n}\r\n\r\n/**\r\n* 최적 배치 탐색 (개선된 Fallback 로직 적용)\r\n* - 비결정형으로 진행하되, 매 브로드캐스트마다 **pulse(카운터)** 를 증가시켜 탐색량을 시각화\r\n*/\r\nasync function solveWithAdvancedFallback({ cores, pool, role, weights, perCoreLimit, emit }) {\r\n  const order = cores.map((_, i) => i);\r\n  const throttled = makeThrottledEmit(emit, 24);\r\n\r\n  // 1) 후보 생성\r\n  const { candidatesPerCore } = await buildAllCandidates({\r\n    cores, pool, role, weights, perCoreLimit, emitOverall: throttled,\r\n  });\r\n  const allCandidates = candidatesPerCore;\r\n\r\n  // 2) 탐색 준비\r\n  let pulse = 0;\r\n  const emitSearchProgress = (force = false) => {\r\n    pulse++;\r\n    throttled({\r\n      type: \"progress\",\r\n      phase: \"search\",\r\n      label: \"최적 배치 탐색 중…\",\r\n      indeterminate: true,\r\n      pulse\r\n    }, force);\r\n  };\r\n  emitSearchProgress(true); // 탐색 시작 알림 (pulse 1)\r\n\r\n  // 3) 탐색 로직 (백트래킹)\r\n  const emptyPick = { list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 };\r\n  const betterThan = (A, B) => {\r\n    if (!B) return true;\r\n    if (A.sumThr !== B.sumThr) return A.sumThr > B.sumThr;\r\n    for (let i = 0; i < A.thrVec.length; i++) if (A.thrVec[i] !== B.thrVec[i]) return A.thrVec[i] > B.thrVec[i];\r\n    if (A.sumPoint !== B.sumPoint) return A.sumPoint > B.sumPoint;\r\n    for (let i = 0; i < A.ptVec.length; i++) if (A.ptVec[i] !== B.ptVec[i]) return A.ptVec[i] > B.ptVec[i];\r\n    if (A.roleSum !== B.roleSum) return A.roleSum > B.roleSum;\r\n    if (A.sumWill !== B.sumWill) return A.sumWill < B.sumWill;\r\n    return false;\r\n  };\r\n\r\n  // 백트래킹 솔버\r\n  function trySolve(enforceSet, blockedSet = new Set()) {\r\n    let best = null;\r\n    const used = new Set();\r\n\r\n    function backtrack(pos, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec) {\r\n      emitSearchProgress();\r\n\r\n      if (pos === order.length) {\r\n        for (const idx of enforceSet) {\r\n          const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n          const t = thrMax(picksAcc[idx]);\r\n          if (t < effMin) return;\r\n        }\r\n        const cand = {\r\n          picks: picksAcc.map(x => x),\r\n          sumThr: sumThrAcc, sumPoint: sumPointAcc, sumWill: sumWillAcc, roleSum: roleSumAcc,\r\n          thrVec: thrVec.slice(), ptVec: ptVec.slice(),\r\n        };\r\n        if (betterThan(cand, best)) best = cand;\r\n        return;\r\n      }\r\n\r\n      const coreIdx = order[pos];\r\n      const isEnf = enforceSet.has(coreIdx);\r\n      const effMin = isEnf ? (cores[coreIdx].minThreshold ?? minOf(cores[coreIdx].grade)) : -Infinity;\r\n\r\n      if (blockedSet.has(coreIdx)) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n        return;\r\n      }\r\n\r\n      const candList = allCandidates[pos] || [];\r\n      for (const pick of candList) {\r\n        const t = thrMax(pick);\r\n        if (isEnf && t < effMin) continue;\r\n        if (clash(pick, used)) continue;\r\n\r\n        pick.list.forEach(g => used.add(g.id));\r\n        const prev = picksAcc[coreIdx];\r\n        picksAcc[coreIdx] = pick;\r\n        thrVec[pos] = t;\r\n        ptVec[pos] = pick.totalPoint;\r\n\r\n        backtrack(pos + 1, picksAcc, sumThrAcc + t, sumPointAcc + pick.totalPoint, sumWillAcc + pick.totalWill, roleSumAcc + pick.roleSum, thrVec, ptVec);\r\n\r\n        pick.list.forEach(g => used.delete(g.id));\r\n        picksAcc[coreIdx] = prev;\r\n        thrVec[pos] = 0;\r\n        ptVec[pos] = 0;\r\n      }\r\n\r\n      if (!isEnf) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n      }\r\n    }\r\n\r\n    backtrack(0, cores.map(() => emptyPick), 0, 0, 0, 0, Array(order.length).fill(0), Array(order.length).fill(0));\r\n    return best;\r\n  }\r\n\r\n  // --- 메인 해결 로직 (Fallback 적용) ---\r\n  const enforcedIdx = cores.map((c, i) => (c.enforceMin ? i : -1)).filter(i => i !== -1);\r\n\r\n  // 1) 전체 강제조건을 만족하는 해 시도\r\n  const enforcedSetFull = new Set(enforcedIdx);\r\n  const bestFull = trySolve(enforcedSetFull);\r\n  if (bestFull) {\r\n    return { picks: bestFull.picks };\r\n  }\r\n\r\n  // 2) 1번 실패 시, 최하위 우선순위 코어를 포기하고 재시도\r\n  if (order.length > 0) {\r\n    const lowestIdx = order[order.length - 1];\r\n    // 최하위 코어가 강제 대상이었을 때만 의미가 있음\r\n    if (enforcedSetFull.has(lowestIdx)) {\r\n      const enforcedMinusLowest = new Set([...enforcedSetFull].filter(i => i !== lowestIdx));\r\n      const bestDropLowest = trySolve(enforcedMinusLowest, new Set([lowestIdx]));\r\n      if (bestDropLowest) {\r\n        const finalPicks = bestDropLowest.picks.map((p, i) => (i === lowestIdx ? emptyPick : (p || emptyPick)));\r\n        return { picks: finalPicks };\r\n      }\r\n    }\r\n  }\r\n\r\n  // 3) 그래도 실패 시: 애초에 달성 불가능한 강제 조건이 있는지 판별\r\n  const infeasibleEnforced = new Set();\r\n  for (const idx of enforcedIdx) {\r\n    const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n    const pos = order.indexOf(idx);\r\n    const hasFeasibleCandidate = (allCandidates[pos] || []).some(ci => thrMax(ci) >= effMin);\r\n    if (!hasFeasibleCandidate) {\r\n      infeasibleEnforced.add(idx);\r\n    }\r\n  }\r\n\r\n  // 4) 달성 가능한 강제 조건만 걸고 재시도\r\n  const enforcedSetReduced = new Set(enforcedIdx.filter(i => !infeasibleEnforced.has(i)));\r\n  const bestReduced = trySolve(enforcedSetReduced);\r\n\r\n  if (bestReduced) {\r\n    // 불가능했던 코어는 결과 없음 처리\r\n    const finalPicks = bestReduced.picks.map((p, i) => (infeasibleEnforced.has(i) ? emptyPick : (p || emptyPick)));\r\n    return { picks: finalPicks };\r\n  }\r\n\r\n  // 5) 최종 안전망\r\n  return { picks: cores.map(() => emptyPick) };\r\n}\r\n\r\n\r\nglobalThis.onmessage = async (e) => {\r\n  const { type = \"run\", cores, gems, role, weights, perCoreLimit } = e.data;\r\n  const emit = (msg) => globalThis.postMessage(msg);\r\n\r\n  try {\r\n    if (type === \"kickoff\") {\r\n      // 워밍업만 수행하고 UI 갱신은 하지 않음\r\n      return;\r\n    }\r\n\r\n    const result = await solveWithAdvancedFallback({\r\n      cores,\r\n      pool: gems,\r\n      role,\r\n      weights: sanitizeWeights(weights),\r\n      perCoreLimit,\r\n      emit,\r\n    });\r\n\r\n    emit({ type: \"result\", ...result });\r\n  } catch (err) {\r\n    console.error(\"Worker error:\", err);\r\n    emit({ type: \"error\", error: String(err?.message || err) });\r\n  }\r\n};"],"names":["CORE_SUPPLY","HERO","LEGEND","RELIC","ANCIENT","CORE_POINT_CAP","CORE_THRESHOLDS","ROLE_KEYS","dealer","Set","support","DEFAULT_WEIGHTS","boss","add","atk","brand","allyDmg","allyAtk","DEALER_LEVEL_CURVES","SUPPORT_LEVEL_CURVES","sanitizeWeights","w","base","Object","keys","forEach","k","raw","num","Number","isFinite","scoreGemForRole","gem","role","weights","sum","key","lvl","_w$key","allow","Array","isArray","includes","has","roleAllowsKey","basePct","L","Math","max","min","levelValueByRole","scale","o1k","o1v","o2k","o2v","combinations","arr","n","length","idx","from","_","i","map","p","j","scoreCombo","combo","grade","totalWill","reduce","s","g","_g$will","will","totalPoint","_g$point","point","thr","filter","t","thresholdsHit","roleSum","score","enumerateCoreCombos","pool","minThreshold","enforceMin","onStep","supplyOverride","_CORE_POINT_CAP$grade2","supply","pointCap","Infinity","W","all","maxPick","push","list","filtered","sort","a","b","need","ci","_ci$list2","_ci$thr2","_ci$thr","thrMaxOf","hits","startPoint","_CORE_POINT_CAP$grade","maxP","_ci$list","pickByPointExactThenUp","_ci$list3","_ci$thr3","thrMax","minOf","now","_globalThis$performan","_globalThis$performan2","_globalThis$performan3","globalThis","performance","call","Date","sleep","ms","Promise","r","setTimeout","clash","pick","usedSet","id","comboCmp","ta","tb","async","buildAllCandidates","_ref","cores","perCoreLimit","emitOverall","totalCombosPerCore","nCk","N","K","c","floor","totalGenAll","doneCombos","candidatesPerCore","state","coreIndex","coreCount","coreDone","coreTotal","t0","onTick","_cores","elapsedMs","showSpeed","rate","etaMs","type","phase","label","name","indeterminate","done","total","core","slice","solveWithAdvancedFallback","_ref2","emit","order","throttled","minMs","arguments","undefined","last","payload","force","makeThrottledEmit","allCandidates","pulse","emitSearchProgress","emptyPick","trySolve","enforceSet","blockedSet","best","used","backtrack","pos","picksAcc","sumThrAcc","sumPointAcc","sumWillAcc","roleSumAcc","thrVec","ptVec","_cores$coreIdx$minThr","_cores$idx$minThresho","effMin","cand","picks","x","sumThr","sumPoint","sumWill","betterThan","A","B","coreIdx","isEnf","candList","prev","delete","fill","enforcedIdx","enforcedSetFull","bestFull","lowestIdx","bestDropLowest","infeasibleEnforced","_cores$idx$minThresho2","indexOf","some","bestReduced","onmessage","gems","e","data","msg","postMessage","err","console","error","String","message"],"sourceRoot":""}