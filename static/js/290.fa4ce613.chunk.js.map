{"version":3,"file":"static/js/290.fa4ce613.chunk.js","mappings":"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","sources":["lib/optimizerCore.js","workers/optimizer.worker.js"],"sourcesContent":["// src/lib/optimizerCore.js\r\n/* =============================== 타입(주석용 정의) =============================== */\r\n/** @typedef {\"dealer\"|\"support\"} Role */\r\n/** @typedef {\"atk\"|\"add\"|\"boss\"|\"brand\"|\"allyDmg\"|\"allyAtk\"} OptionKey */\r\n/** @typedef {\"HERO\"|\"LEGEND\"|\"RELIC\"|\"ANCIENT\"} CoreGrade */\r\n/** @typedef {{id:string, will:number|null, point:number|null, o1k:OptionKey, o1v:number|null, o2k:OptionKey, o2v:number|null}} Gem */\r\n/** @typedef {{[k in OptionKey]: number}} Weights */\r\n/** @typedef {{ id:string, name:string, grade:CoreGrade, minThreshold?:number, enforceMin:boolean }} CoreDef */\r\n/** @typedef {{ list: Gem[], totalWill:number, totalPoint:number, thr:number[], roleSum:number, score:number }} ComboInfo */\r\n\r\n/* =============================== 상수 정의 =============================== */\r\nexport const CORE_SUPPLY = { HERO: 7, LEGEND: 11, RELIC: 15, ANCIENT: 17 };\r\nexport const CORE_THRESHOLDS = {\r\n  HERO: [10],\r\n  LEGEND: [10, 14],\r\n  RELIC: [10, 14, 17, 18, 19, 20],\r\n  ANCIENT: [10, 14, 17, 18, 19, 20],\r\n};\r\nexport const CORE_LABEL = { HERO: \"영웅\", LEGEND: \"전설\", RELIC: \"유물\", ANCIENT: \"고대\" };\r\nexport const GRADES = [\"HERO\", \"LEGEND\", \"RELIC\", \"ANCIENT\"];\r\nexport const OPTION_LABELS = {\r\n  atk: \"공격력\",\r\n  add: \"추가 피해\",\r\n  boss: \"보스 피해\",\r\n  brand: \"낙인력\",\r\n  allyDmg: \"아군 피해 강화\",\r\n  allyAtk: \"아군 공격 강화\",\r\n};\r\nexport const OPTIONS = [\"atk\", \"add\", \"boss\", \"brand\", \"allyDmg\", \"allyAtk\"];\r\nexport const ROLE_KEYS = {\r\n  dealer: new Set([\"atk\", \"add\", \"boss\"]),\r\n  support: new Set([\"brand\", \"allyDmg\", \"allyAtk\"]),\r\n};\r\nexport const DEFAULT_WEIGHTS = { atk: 1, add: 1, boss: 1, brand: 1, allyDmg: 1, allyAtk: 1 };\r\n// 딜러 가중치: y ≈ slope * level (원점 통과 회귀 추정)\r\nexport const DEALER_WEIGHTS = {\r\n  boss: 0.07870909,\r\n  add: 0.06018182,\r\n  atk: 0.03407273,\r\n  brand: 0,\r\n  allyDmg: 0,\r\n  allyAtk: 0,\r\n};\r\n\r\n/* =============================== 유틸/헬퍼 =============================== */\r\nexport function sanitizeWeights(w) {\r\n  const base = { ...DEFAULT_WEIGHTS };\r\n  if (!w) return base;\r\n  Object.keys(base).forEach((k) => {\r\n    const raw = w[k];\r\n    const num = typeof raw === 'number' ? raw : Number(raw);\r\n    base[k] = Number.isFinite(num) && num >= 0 ? num : DEFAULT_WEIGHTS[k];\r\n  });\r\n  return /** @type {Weights} */(base);\r\n}\r\nexport function scoreGemForRole(g, role, w) {\r\n  if (role == null) return 0; // 역할 미선택이면 유효옵션 점수 0\r\n  const keys = role === \"dealer\" ? ROLE_KEYS.dealer : ROLE_KEYS.support;\r\n  const s1 = keys.has(g.o1k) ? (g.o1v ?? 0) * (w[g.o1k] ?? 1) : 0;\r\n  const s2 = keys.has(g.o2k) ? (g.o2v ?? 0) * (w[g.o2k] ?? 1) : 0;\r\n  return s1 + s2;\r\n}\r\nexport function* combinations(arr, k) {\r\n  const n = arr.length; if (k > n) return;\r\n  const idx = Array.from({ length: k }, (_, i) => i);\r\n  while (true) {\r\n    yield idx.map(i => arr[i]);\r\n    let p = k - 1;\r\n    while (p >= 0 && idx[p] === n - k + p) p--;\r\n    if (p < 0) break;\r\n    idx[p]++;\r\n    for (let j = p + 1; j < k; j++) idx[j] = idx[j - 1] + 1;\r\n  }\r\n}\r\nexport function thresholdsHit(grade, totalPoint) {\r\n  const th = CORE_THRESHOLDS[grade];\r\n  return th.filter(t => totalPoint >= t);\r\n}\r\nexport function scoreCombo(combo, grade, role, weights) {\r\n  const totalWill = combo.reduce((s, g) => s + ((g.will ?? 0)), 0);\r\n  const totalPoint = combo.reduce((s, g) => s + ((g.point ?? 0)), 0);\r\n  const thr = thresholdsHit(grade, totalPoint);\r\n  const roleSum = combo.reduce((s, g) => s + scoreGemForRole(g, role, weights), 0);\r\n  const score = (thr.length * 10_000_000)\r\n    + (totalPoint * 10_000)\r\n    + ((5_000 - totalWill) * 10)\r\n    + roleSum\r\n    - combo.length;\r\n  return { totalWill, totalPoint, thr, roleSum, score };\r\n}\r\n/* 단일 코어 후보 산출 (통일 정책: 달성 구간이 없으면 결과 없음) */\r\nexport function enumerateCoreCombos(pool, grade, role, weights, minThreshold, enforceMin, onStep) {\r\n  const supply = CORE_SUPPLY[grade];\r\n  const W = sanitizeWeights(weights);\r\n  const minOfGrade = Math.min(...CORE_THRESHOLDS[grade]);\r\n  const effMin = minThreshold ?? minOfGrade;\r\n  const effEnforce = enforceMin || minThreshold == null;\r\n  /** @type {ComboInfo[]} */\r\n  const all = [];\r\n  const maxPick = Math.min(4, pool.length);\r\n  for (let k = 0; k <= maxPick; k++) {\r\n    if (k === 0) { all.push({ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 }); continue; }\r\n    for (const combo of combinations(pool, k)) {\r\n      onStep && onStep(1); // 콤보 하나 평가 시작(진행률 카운트)\r\n      const totalWill = combo.reduce((s, g) => s + (g.will || 0), 0);\r\n      if (totalWill > supply) continue;\r\n      const { totalPoint, thr, roleSum, score } = scoreCombo(combo, grade, role, W);\r\n      all.push({ list: combo, totalWill, totalPoint, thr, roleSum, score });\r\n    }\r\n  }\r\n  all.sort((a, b) => b.score - a.score);\r\n  let filtered;\r\n  if (effEnforce) {\r\n    filtered = all.filter(ci => {\r\n      const maxThr = Math.max(0, ...ci.thr);\r\n      return ci.list.length > 0 && maxThr >= (effMin ?? 0);\r\n    });\r\n  } else {\r\n    filtered = all.filter(ci => ci.list.length > 0 && ci.thr.length > 0);\r\n  }\r\n  if (filtered.length === 0) {\r\n    return [{ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 }];\r\n  }\r\n  return filtered;\r\n}","// src/workers/optimizer.worker.js\r\n/* eslint-env worker, es2020 */\r\nimport { enumerateCoreCombos, CORE_THRESHOLDS, sanitizeWeights } from \"../lib/optimizerCore.js\";\r\n\r\nconst thrMax = (ci) => (ci?.thr?.length ? Math.max(...ci.thr) : 0);\r\nconst minOf = (g) => Math.min(...CORE_THRESHOLDS[g]);\r\nconst now = () => (globalThis.performance?.now?.() ?? Date.now());\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nfunction clash(pick, usedSet) {\r\n  for (const g of pick.list) if (usedSet.has(g.id)) return true;\r\n  return false;\r\n}\r\n\r\n// emit을 너무 자주 보내지 않도록 간단 throttle\r\nfunction makeThrottledEmit(emit, minMs = 16) {\r\n  let last = 0;\r\n  return (payload, force = false) => {\r\n    const t = now();\r\n    if (force || t - last >= minMs) {\r\n      last = t;\r\n      emit(payload);\r\n    }\r\n  };\r\n}\r\n\r\n// 정렬 comparator를 루프 밖으로 (ESLint 안정성/성능)\r\nconst comboCmp = (a, b) => {\r\n  const ta = thrMax(a), tb = thrMax(b);\r\n  if (ta !== tb) return tb - ta;\r\n  if (a.totalPoint !== b.totalPoint) return b.totalPoint - a.totalPoint;\r\n  if (a.roleSum !== b.roleSum) return b.roleSum - a.roleSum;\r\n  return a.totalWill - b.totalWill;\r\n};\r\n\r\n/**\r\n* 후보 생성: 코어별로 프레임 양보하면서 진행 브로드캐스트\r\n* - gen 단계는 전체 후보 조합 수를 알 수 있으니 **결정형 퍼센트(done/total)** 제공\r\n* - 동시에 코어별 상세(코어 n/m, x/y, 속도/ETA)도 함께 전송\r\n*/\r\nasync function buildAllCandidates({ cores, pool, role, weights, perCoreLimit, emitOverall }) {\r\n  const n = pool.length;\r\n  const maxPick = Math.min(4, n);\r\n\r\n  const nCk = (N, K) => {\r\n    let c = 1;\r\n    for (let i = 1; i <= K; i++) c = (c * (N - i + 1)) / i;\r\n    return Math.floor(c);\r\n  };\r\n\r\n  // 한 코어당 이론상 생성할 조합 개수(1~4개 선택 합)\r\n  const totalCombosPerCore = Array.from({ length: maxPick }, (_, i) => nCk(n, i + 1))\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  // 전체(gen) 퍼센트용 총량\r\n  const totalGenAll = totalCombosPerCore * cores.length;\r\n\r\n  let doneCombos = 0;\r\n  const candidatesPerCore = [];\r\n\r\n  const state = {\r\n    coreIndex: 0,\r\n    coreCount: cores.length,\r\n    coreDone: 0,\r\n    coreTotal: 0,\r\n    t0: 0,\r\n  };\r\n\r\n  // 루프 밖 단일 onTick (ESLint no-loop-func 대응)\r\n  const onTick = () => {\r\n    // 전역(doneCombos) & 코어별 진행 증가\r\n    doneCombos += 1;\r\n    state.coreDone += 1;\r\n\r\n    const elapsedMs = now() - state.t0;\r\n    const showSpeed = elapsedMs >= 250 && state.coreDone >= Math.min(1000, state.coreTotal * 0.05);\r\n    const rate = showSpeed ? (state.coreDone / (elapsedMs / 1000)) : null;\r\n    const etaMs = showSpeed && rate ? Math.max(0, (state.coreTotal - state.coreDone) / rate) * 1000 : null;\r\n\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${cores[state.coreIndex - 1]?.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,        // ✅ 결정형\r\n      done: doneCombos,          // ✅ 전체(gen) 진행수\r\n      total: totalGenAll,         // ✅ 전체(gen) 총량\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal,\r\n      rate, elapsedMs, etaMs\r\n    });\r\n  };\r\n\r\n  // 코어별로 순차 생성 + 프레임 양보\r\n  for (let idx = 0; idx < cores.length; idx++) {\r\n    const core = cores[idx];\r\n\r\n    state.coreIndex = idx + 1;\r\n    state.coreDone = 0;\r\n    state.coreTotal = totalCombosPerCore; // 동일 풀 기준 이론 총량\r\n    state.t0 = now();\r\n\r\n    // 시작 알림 (렌더 기회) — 결정형 퍼센트 0%에서 시작\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n\r\n    const list = enumerateCoreCombos(\r\n      pool, core.grade, role, weights, undefined, false, onTick\r\n    )\r\n      .filter((ci) => ci.list.length > 0 && ci.thr.length > 0)\r\n      .sort(comboCmp)\r\n      .slice(0, perCoreLimit);\r\n\r\n    candidatesPerCore[idx] = list;\r\n\r\n    // 코어 종료 스냅샷(강제 1회) + 프레임 양보\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreTotal,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n  }\r\n\r\n  return { candidatesPerCore, totalGenAll, doneCombos };\r\n}\r\n\r\n/**\r\n* 최적 배치 탐색 (개선된 Fallback 로직 적용)\r\n* - 비결정형으로 진행하되, 매 브로드캐스트마다 **pulse(카운터)** 를 증가시켜 탐색량을 시각화\r\n*/\r\nasync function solveWithAdvancedFallback({ cores, pool, role, weights, perCoreLimit, emit }) {\r\n  const order = cores.map((_, i) => i);\r\n  const throttled = makeThrottledEmit(emit, 24);\r\n\r\n  // 1) 후보 생성\r\n  const { candidatesPerCore } = await buildAllCandidates({\r\n    cores, pool, role, weights, perCoreLimit, emitOverall: throttled,\r\n  });\r\n  const allCandidates = candidatesPerCore;\r\n\r\n  // 2) 탐색 준비\r\n  let pulse = 0;\r\n  const emitSearchProgress = (force = false) => {\r\n    pulse++;\r\n    throttled({\r\n      type: \"progress\",\r\n      phase: \"search\",\r\n      label: \"최적 배치 탐색 중…\",\r\n      indeterminate: true,\r\n      pulse\r\n    }, force);\r\n  };\r\n  emitSearchProgress(true); // 탐색 시작 알림 (pulse 1)\r\n\r\n  // 3) 탐색 로직 (백트래킹)\r\n  const emptyPick = { list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 };\r\n  const betterThan = (A, B) => {\r\n    if (!B) return true;\r\n    if (A.sumThr !== B.sumThr) return A.sumThr > B.sumThr;\r\n    for (let i = 0; i < A.thrVec.length; i++) if (A.thrVec[i] !== B.thrVec[i]) return A.thrVec[i] > B.thrVec[i];\r\n    if (A.sumPoint !== B.sumPoint) return A.sumPoint > B.sumPoint;\r\n    for (let i = 0; i < A.ptVec.length; i++) if (A.ptVec[i] !== B.ptVec[i]) return A.ptVec[i] > B.ptVec[i];\r\n    if (A.roleSum !== B.roleSum) return A.roleSum > B.roleSum;\r\n    if (A.sumWill !== B.sumWill) return A.sumWill < B.sumWill;\r\n    return false;\r\n  };\r\n\r\n  // 백트래킹 솔버\r\n  function trySolve(enforceSet, blockedSet = new Set()) {\r\n    let best = null;\r\n    const used = new Set();\r\n\r\n    function backtrack(pos, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec) {\r\n      emitSearchProgress();\r\n\r\n      if (pos === order.length) {\r\n        for (const idx of enforceSet) {\r\n          const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n          const t = thrMax(picksAcc[idx]);\r\n          if (t < effMin) return;\r\n        }\r\n        const cand = {\r\n          picks: picksAcc.map(x => x),\r\n          sumThr: sumThrAcc, sumPoint: sumPointAcc, sumWill: sumWillAcc, roleSum: roleSumAcc,\r\n          thrVec: thrVec.slice(), ptVec: ptVec.slice(),\r\n        };\r\n        if (betterThan(cand, best)) best = cand;\r\n        return;\r\n      }\r\n\r\n      const coreIdx = order[pos];\r\n      const isEnf = enforceSet.has(coreIdx);\r\n      const effMin = isEnf ? (cores[coreIdx].minThreshold ?? minOf(cores[coreIdx].grade)) : -Infinity;\r\n\r\n      if (blockedSet.has(coreIdx)) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n        return;\r\n      }\r\n\r\n      const candList = allCandidates[pos] || [];\r\n      for (const pick of candList) {\r\n        const t = thrMax(pick);\r\n        if (isEnf && t < effMin) continue;\r\n        if (clash(pick, used)) continue;\r\n\r\n        pick.list.forEach(g => used.add(g.id));\r\n        const prev = picksAcc[coreIdx];\r\n        picksAcc[coreIdx] = pick;\r\n        thrVec[pos] = t;\r\n        ptVec[pos] = pick.totalPoint;\r\n\r\n        backtrack(pos + 1, picksAcc, sumThrAcc + t, sumPointAcc + pick.totalPoint, sumWillAcc + pick.totalWill, roleSumAcc + pick.roleSum, thrVec, ptVec);\r\n\r\n        pick.list.forEach(g => used.delete(g.id));\r\n        picksAcc[coreIdx] = prev;\r\n        thrVec[pos] = 0;\r\n        ptVec[pos] = 0;\r\n      }\r\n\r\n      if (!isEnf) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n      }\r\n    }\r\n\r\n    backtrack(0, cores.map(() => emptyPick), 0, 0, 0, 0, Array(order.length).fill(0), Array(order.length).fill(0));\r\n    return best;\r\n  }\r\n\r\n  // --- 메인 해결 로직 (Fallback 적용) ---\r\n  const enforcedIdx = cores.map((c, i) => (c.enforceMin ? i : -1)).filter(i => i !== -1);\r\n\r\n  // 1) 전체 강제조건을 만족하는 해 시도\r\n  const enforcedSetFull = new Set(enforcedIdx);\r\n  const bestFull = trySolve(enforcedSetFull);\r\n  if (bestFull) {\r\n    return { picks: bestFull.picks };\r\n  }\r\n\r\n  // 2) 1번 실패 시, 최하위 우선순위 코어를 포기하고 재시도\r\n  if (order.length > 0) {\r\n    const lowestIdx = order[order.length - 1];\r\n    // 최하위 코어가 강제 대상이었을 때만 의미가 있음\r\n    if (enforcedSetFull.has(lowestIdx)) {\r\n      const enforcedMinusLowest = new Set([...enforcedSetFull].filter(i => i !== lowestIdx));\r\n      const bestDropLowest = trySolve(enforcedMinusLowest, new Set([lowestIdx]));\r\n      if (bestDropLowest) {\r\n        const finalPicks = bestDropLowest.picks.map((p, i) => (i === lowestIdx ? emptyPick : (p || emptyPick)));\r\n        return { picks: finalPicks };\r\n      }\r\n    }\r\n  }\r\n\r\n  // 3) 그래도 실패 시: 애초에 달성 불가능한 강제 조건이 있는지 판별\r\n  const infeasibleEnforced = new Set();\r\n  for (const idx of enforcedIdx) {\r\n    const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n    const pos = order.indexOf(idx);\r\n    const hasFeasibleCandidate = (allCandidates[pos] || []).some(ci => thrMax(ci) >= effMin);\r\n    if (!hasFeasibleCandidate) {\r\n      infeasibleEnforced.add(idx);\r\n    }\r\n  }\r\n\r\n  // 4) 달성 가능한 강제 조건만 걸고 재시도\r\n  const enforcedSetReduced = new Set(enforcedIdx.filter(i => !infeasibleEnforced.has(i)));\r\n  const bestReduced = trySolve(enforcedSetReduced);\r\n\r\n  if (bestReduced) {\r\n    // 불가능했던 코어는 결과 없음 처리\r\n    const finalPicks = bestReduced.picks.map((p, i) => (infeasibleEnforced.has(i) ? emptyPick : (p || emptyPick)));\r\n    return { picks: finalPicks };\r\n  }\r\n\r\n  // 5) 최종 안전망\r\n  return { picks: cores.map(() => emptyPick) };\r\n}\r\n\r\n\r\nglobalThis.onmessage = async (e) => {\r\n  const { type = \"run\", cores, gems, role, weights, perCoreLimit } = e.data;\r\n  const emit = (msg) => globalThis.postMessage(msg);\r\n\r\n  try {\r\n    if (type === \"kickoff\") {\r\n      // 워밍업만 수행하고 UI 갱신은 하지 않음\r\n      return;\r\n    }\r\n\r\n    const result = await solveWithAdvancedFallback({\r\n      cores,\r\n      pool: gems,\r\n      role,\r\n      weights: sanitizeWeights(weights),\r\n      perCoreLimit,\r\n      emit,\r\n    });\r\n\r\n    emit({ type: \"result\", ...result });\r\n  } catch (err) {\r\n    console.error(\"Worker error:\", err);\r\n    emit({ type: \"error\", error: String(err?.message || err) });\r\n  }\r\n};"],"names":["CORE_SUPPLY","HERO","LEGEND","RELIC","ANCIENT","CORE_THRESHOLDS","ROLE_KEYS","dealer","Set","support","DEFAULT_WEIGHTS","atk","add","boss","brand","allyDmg","allyAtk","sanitizeWeights","w","base","Object","keys","forEach","k","raw","num","Number","isFinite","combinations","arr","n","length","idx","Array","from","_","i","map","p","j","scoreCombo","combo","grade","role","weights","totalWill","reduce","s","g","_g$will","will","totalPoint","_g$point","point","thr","filter","t","thresholdsHit","roleSum","_g$o1v","_w$g$o1k","_g$o2v","_w$g$o2k","has","o1k","o1v","o2k","o2v","scoreGemForRole","score","enumerateCoreCombos","pool","minThreshold","enforceMin","onStep","supply","W","minOfGrade","Math","min","effMin","effEnforce","all","maxPick","push","list","filtered","sort","a","b","ci","maxThr","max","thrMax","_ci$thr","minOf","now","_globalThis$performan","_globalThis$performan2","_globalThis$performan3","globalThis","performance","call","Date","sleep","ms","Promise","r","setTimeout","clash","pick","usedSet","id","comboCmp","ta","tb","async","buildAllCandidates","_ref","cores","perCoreLimit","emitOverall","totalCombosPerCore","nCk","N","K","c","floor","totalGenAll","doneCombos","candidatesPerCore","state","coreIndex","coreCount","coreDone","coreTotal","t0","onTick","_cores","elapsedMs","showSpeed","rate","etaMs","type","phase","label","name","indeterminate","done","total","core","undefined","slice","solveWithAdvancedFallback","_ref2","emit","order","throttled","minMs","arguments","last","payload","force","makeThrottledEmit","allCandidates","pulse","emitSearchProgress","emptyPick","trySolve","enforceSet","blockedSet","best","used","backtrack","pos","picksAcc","sumThrAcc","sumPointAcc","sumWillAcc","roleSumAcc","thrVec","ptVec","_cores$coreIdx$minThr","_cores$idx$minThresho","cand","picks","x","sumThr","sumPoint","sumWill","betterThan","A","B","coreIdx","isEnf","Infinity","candList","prev","delete","fill","enforcedIdx","enforcedSetFull","bestFull","lowestIdx","bestDropLowest","infeasibleEnforced","_cores$idx$minThresho2","indexOf","some","bestReduced","onmessage","gems","e","data","msg","postMessage","err","console","error","String","message"],"sourceRoot":""}