{"version":3,"file":"static/js/290.ea35cedd.chunk.js","mappings":"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","sources":["lib/optimizerCore.js","workers/optimizer.worker.js"],"sourcesContent":["// src/lib/optimizerCore.js\r\n\r\n/* =============================== 타입(주석용 정의) =============================== */\r\n/** @typedef {\"dealer\"|\"support\"} Role */\r\n/** @typedef {\"atk\"|\"add\"|\"boss\"|\"brand\"|\"allyDmg\"|\"allyAtk\"} OptionKey */\r\n/** @typedef {\"HERO\"|\"LEGEND\"|\"RELIC\"|\"ANCIENT\"} CoreGrade */\r\n/** @typedef {{id:string, will:number|null, point:number|null, o1k:OptionKey, o1v:number|null, o2k:OptionKey, o2v:number|null}} Gem */\r\n/** @typedef {{[k in OptionKey]: number}} Weights */\r\n/** @typedef {{ id:string, name:string, grade:CoreGrade, minThreshold?:number, enforceMin:boolean }} CoreDef */\r\n/** @typedef {{ list: Gem[], totalWill:number, totalPoint:number, thr:number[], roleSum:number, score:number }} ComboInfo */\r\n\r\n/* =============================== 상수 정의 =============================== */\r\nexport const CORE_SUPPLY = { HERO: 7, LEGEND: 11, RELIC: 15, ANCIENT: 17 };\r\nexport const CORE_THRESHOLDS = {\r\n  HERO: [10],\r\n  LEGEND: [10, 14],\r\n  RELIC: [10, 14, 17, 18, 19, 20],\r\n  ANCIENT: [10, 14, 17, 18, 19, 20],\r\n};\r\nexport const CORE_LABEL = { HERO: \"영웅\", LEGEND: \"전설\", RELIC: \"유물\", ANCIENT: \"고대\" };\r\nexport const GRADES = [\"HERO\", \"LEGEND\", \"RELIC\", \"ANCIENT\"];\r\nexport const OPTION_LABELS = {\r\n  atk: \"공격력\",\r\n  add: \"추가 피해\",\r\n  boss: \"보스 피해\",\r\n  brand: \"낙인력\",\r\n  allyDmg: \"아군 피해 강화\",\r\n  allyAtk: \"아군 공격 강화\",\r\n};\r\nexport const OPTIONS = [\"atk\", \"add\", \"boss\", \"brand\", \"allyDmg\", \"allyAtk\"];\r\nexport const ROLE_KEYS = {\r\n  dealer: new Set([\"atk\", \"add\", \"boss\"]),\r\n  support: new Set([\"brand\", \"allyDmg\", \"allyAtk\"]),\r\n};\r\nexport const DEFAULT_WEIGHTS = { atk: 1, add: 1, boss: 1, brand: 1, allyDmg: 1, allyAtk: 1 };\r\n// 딜러 가중치: y ≈ slope * level (원점 통과 회귀 추정)\r\nexport const DEALER_WEIGHTS = {\r\n  boss: 0.07870909,\r\n  add: 0.06018182,\r\n  atk: 0.03407273,\r\n  brand: 0,\r\n  allyDmg: 0,\r\n  allyAtk: 0,\r\n};\r\n\r\n/* =============================== 유틸/헬퍼 =============================== */\r\nexport function sanitizeWeights(w) {\r\n  const base = { ...DEFAULT_WEIGHTS };\r\n  if (!w) return base;\r\n  Object.keys(base).forEach((k) => {\r\n    const raw = w[k];\r\n    const num = typeof raw === 'number' ? raw : Number(raw);\r\n    base[k] = Number.isFinite(num) && num >= 0 ? num : DEFAULT_WEIGHTS[k];\r\n  });\r\n  return /** @type {Weights} */(base);\r\n}\r\nexport function scoreGemForRole(g, role, w) {\r\n  if (role == null) return 0; // 역할 미선택이면 유효옵션 점수 0\r\n  const keys = role === \"dealer\" ? ROLE_KEYS.dealer : ROLE_KEYS.support;\r\n  const s1 = keys.has(g.o1k) ? (g.o1v ?? 0) * (w[g.o1k] ?? 1) : 0;\r\n  const s2 = keys.has(g.o2k) ? (g.o2v ?? 0) * (w[g.o2k] ?? 1) : 0;\r\n  return s1 + s2;\r\n}\r\nexport function* combinations(arr, k) {\r\n  const n = arr.length; if (k > n) return;\r\n  const idx = Array.from({ length: k }, (_, i) => i);\r\n  while (true) {\r\n    yield idx.map(i => arr[i]);\r\n    let p = k - 1;\r\n    while (p >= 0 && idx[p] === n - k + p) p--;\r\n    if (p < 0) break;\r\n    idx[p]++;\r\n    for (let j = p + 1; j < k; j++) idx[j] = idx[j - 1] + 1;\r\n  }\r\n}\r\nexport function thresholdsHit(grade, totalPoint) {\r\n  const th = CORE_THRESHOLDS[grade];\r\n  return th.filter(t => totalPoint >= t);\r\n}\r\nexport function scoreCombo(combo, grade, role, weights) {\r\n  const totalWill = combo.reduce((s, g) => s + ((g.will ?? 0)), 0);\r\n  const totalPoint = combo.reduce((s, g) => s + ((g.point ?? 0)), 0);\r\n  const thr = thresholdsHit(grade, totalPoint);\r\n  const roleSum = combo.reduce((s, g) => s + scoreGemForRole(g, role, weights), 0);\r\n  const score = (thr.length * 10_000_000)\r\n              + (totalPoint * 10_000)\r\n              + ((5_000 - totalWill) * 10)\r\n              + roleSum\r\n              - combo.length;\r\n  return { totalWill, totalPoint, thr, roleSum, score };\r\n}\r\n/* 단일 코어 후보 산출 (통일 정책: 달성 구간이 없으면 결과 없음) */\r\nexport function enumerateCoreCombos(pool, grade, role, weights, minThreshold, enforceMin) {\r\n  const supply = CORE_SUPPLY[grade];\r\n  const W = sanitizeWeights(weights);\r\n  const minOfGrade = Math.min(...CORE_THRESHOLDS[grade]);\r\n  const effMin = minThreshold ?? minOfGrade;\r\n  const effEnforce = enforceMin || minThreshold == null;\r\n  /** @type {ComboInfo[]} */\r\n  const all = [];\r\n  const maxPick = Math.min(4, pool.length);\r\n  for (let k = 0; k <= maxPick; k++) {\r\n    if (k === 0) { all.push({ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 }); continue; }\r\n    for (const combo of combinations(pool, k)) {\r\n      const totalWill = combo.reduce((s, g) => s + (g.will || 0), 0);\r\n      if (totalWill > supply) continue;\r\n      const { totalPoint, thr, roleSum, score } = scoreCombo(combo, grade, role, W);\r\n      all.push({ list: combo, totalWill, totalPoint, thr, roleSum, score });\r\n    }\r\n  }\r\n  all.sort((a, b) => b.score - a.score);\r\n  let filtered;\r\n  if (effEnforce) {\r\n    filtered = all.filter(ci => {\r\n      const maxThr = Math.max(0, ...ci.thr);\r\n      return ci.list.length > 0 && maxThr >= (effMin ?? 0);\r\n    });\r\n  } else {\r\n    filtered = all.filter(ci => ci.list.length > 0 && ci.thr.length > 0);\r\n  }\r\n  if (filtered.length === 0) {\r\n    return [{ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 }];\r\n  }\r\n  return filtered;\r\n}\r\n/* ===== 전역 최적 배치: thr 합 최대(1순위) + 강제는 하한(≥min) + 우선순위 사전식 ===== */\r\nexport function optimizeRoundRobinTargets(cores, pool, role, weights, perCoreLimit = 300) {\r\n  const W = sanitizeWeights(weights);\r\n  const thresholdsOf = (grade) => CORE_THRESHOLDS[grade];\r\n  const minOf = (grade) => Math.min(...thresholdsOf(grade));\r\n  const thrMax = (ci) => (ci?.thr?.length ? Math.max(...ci.thr) : 0);\r\n\r\n  const emptyPick = { list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 };\r\n\r\n  // 표시 우선순위(위→아래)\r\n  const order = cores.map((_, i) => i);\r\n  const enforcedIdx = cores.map((c, i) => (c.enforceMin ? i : -1)).filter(i => i !== -1);\r\n\r\n  const candidatesFor = (core, gemPool) => {\r\n    const arr = enumerateCoreCombos(gemPool, core.grade, role, W, undefined, false)\r\n      .filter(ci => ci.list.length > 0 && ci.thr.length > 0);\r\n    arr.sort((a, b) => {\r\n      const ta = thrMax(a), tb = thrMax(b);\r\n      if (ta !== tb) return tb - ta;\r\n      if (a.totalPoint !== b.totalPoint) return b.totalPoint - a.totalPoint;\r\n      if (a.roleSum !== b.roleSum) return b.roleSum - a.roleSum; // 유효합 우선\r\n      return a.totalWill - b.totalWill;\r\n    });\r\n    return arr.slice(0, Math.max(perCoreLimit, 10000));\r\n  };\r\n\r\n  const allCandidates = order.map(i => candidatesFor(cores[i], pool));\r\n\r\n  function betterThan(A, B) {\r\n    if (!B) return true;\r\n    if (A.sumThr !== B.sumThr) return A.sumThr > B.sumThr;\r\n    for (let i = 0; i < A.thrVec.length; i++) {\r\n      if (A.thrVec[i] !== B.thrVec[i]) return A.thrVec[i] > B.thrVec[i];\r\n    }\r\n    if (A.sumPoint !== B.sumPoint) return A.sumPoint > B.sumPoint;\r\n    for (let i = 0; i < A.ptVec.length; i++) {\r\n      if (A.ptVec[i] !== B.ptVec[i]) return A.ptVec[i] > B.ptVec[i];\r\n    }\r\n    if (A.roleSum !== B.roleSum) return A.roleSum > B.roleSum; // 유효합 더 큰 쪽\r\n    if (A.sumWill !== B.sumWill) return A.sumWill < B.sumWill; // 의지력 적을수록 우위\r\n    return false;\r\n  }\r\n\r\n  // ---- 공통 백트래킹: 주어진 enforceSet에 대해 최적해 탐색 ----\r\n  function trySolve(enforceSet, blockedSet = new Set()) {\r\n    let best = null;\r\n    const used = new Set();\r\n\r\n    function backtrack(pos, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec) {\r\n      if (pos === order.length) {\r\n        // 강제 코어 하한 검사\r\n        for (const idx of enforceSet) {\r\n          const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n          const t = thrMax(picksAcc[idx]);\r\n          if (t < effMin) return;\r\n        }\r\n        const cand = {\r\n          picks: picksAcc.map(x => x),\r\n          sumThr: sumThrAcc,\r\n          sumPoint: sumPointAcc,\r\n          sumWill: sumWillAcc,\r\n          roleSum: roleSumAcc,\r\n          thrVec: thrVec.slice(),\r\n          ptVec: ptVec.slice(),\r\n        };\r\n        if (betterThan(cand, best)) best = cand;\r\n        return;\r\n      }\r\n\r\n      const coreIdx = order[pos];\r\n      const isEnf = enforceSet.has(coreIdx);\r\n      const effMin = isEnf ? (cores[coreIdx].minThreshold ?? minOf(cores[coreIdx].grade)) : -Infinity;\r\n\r\n      // 차단 코어는 empty만 허용\r\n      if (blockedSet.has(coreIdx)) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n        return;\r\n      }\r\n\r\n      const candList = allCandidates[pos];\r\n\r\n      // 후보 시도\r\n      for (const pick of candList) {\r\n        const t = thrMax(pick);\r\n        if (isEnf && t < effMin) continue;\r\n\r\n        // 젬 충돌\r\n        let clash = false;\r\n        for (const g of pick.list) { if (used.has(g.id)) { clash = true; break; } }\r\n        if (clash) continue;\r\n\r\n        pick.list.forEach(g => used.add(g.id));\r\n        const prev = picksAcc[coreIdx];\r\n        picksAcc[coreIdx] = pick;\r\n\r\n        thrVec[pos] = t;\r\n        ptVec[pos] = pick.totalPoint;\r\n\r\n        backtrack(\r\n          pos + 1,\r\n          picksAcc,\r\n          sumThrAcc + t,\r\n          sumPointAcc + pick.totalPoint,\r\n          sumWillAcc + pick.totalWill,\r\n          roleSumAcc + pick.roleSum,\r\n          thrVec,\r\n          ptVec\r\n        );\r\n\r\n        // 롤백\r\n        pick.list.forEach(g => used.delete(g.id));\r\n        picksAcc[coreIdx] = prev;\r\n        thrVec[pos] = 0;\r\n        ptVec[pos] = 0;\r\n      }\r\n\r\n      // 비강제는 빈 선택 허용\r\n      if (!isEnf) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n      }\r\n    }\r\n\r\n    backtrack(\r\n      0,\r\n      cores.map(() => emptyPick),\r\n      0, 0, 0, 0,\r\n      Array(order.length).fill(0),\r\n      Array(order.length).fill(0)\r\n    );\r\n\r\n    return best; // null(실패) 또는 최적해\r\n  }\r\n\r\n  // 1) 원래 로직(강제 전부 지킴) 우선 시도\r\n  const enforcedSetFull = new Set(enforcedIdx);\r\n  const bestFull = trySolve(enforcedSetFull);\r\n  if (bestFull) {\r\n    return { picks: bestFull.picks };\r\n  }\r\n\r\n  // 1.5) 전역해가 없으면: 최하 코어를 차단하고 재시도\r\n  if (order.length > 0) {\r\n    const lowestIdx = order[order.length - 1];\r\n    const enforcedMinusLowest = new Set([...enforcedSetFull].filter(i => i !== lowestIdx));\r\n    const bestDropLowest = trySolve(enforcedMinusLowest, new Set([lowestIdx]));\r\n    if (bestDropLowest) {\r\n      const finalPicks = bestDropLowest.picks.map((p, i) => (i === lowestIdx ? emptyPick : (p || emptyPick)));\r\n      return { picks: finalPicks };\r\n    }\r\n  }\r\n\r\n  // 2) 강제 불가능 판별\r\n  const infeasibleEnforced = new Set();\r\n  for (const idx of enforcedIdx) {\r\n    const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n    const pos = order.indexOf(idx);\r\n    const hasFeasible = (allCandidates[pos] || []).some(ci => thrMax(ci) >= effMin);\r\n    if (!hasFeasible) infeasibleEnforced.add(idx);\r\n  }\r\n\r\n  // 3) 가능한 강제만 유지하고 다시 최적화\r\n  const enforcedSetReduced = new Set(enforcedIdx.filter(i => !infeasibleEnforced.has(i)));\r\n  const bestReduced = trySolve(enforcedSetReduced);\r\n\r\n  if (bestReduced) {\r\n    // 4) 최종 출력에서 \"실제로 불가능했던 강제 코어\"만 결과없음 처리\r\n    const finalPicks = bestReduced.picks.map((p, i) => (infeasibleEnforced.has(i) ? emptyPick : (p || emptyPick)));\r\n    return { picks: finalPicks };\r\n  }\r\n\r\n  // 5) 그래도 실패 시 안전망\r\n  return { picks: cores.map(() => emptyPick) };\r\n}\r\n","/* eslint-env worker, es2020 */\r\nimport { optimizeRoundRobinTargets } from \"../lib/optimizerCore.js\";\r\n\r\nglobalThis.onmessage = (e) => {\r\n  const { cores, gems, role, weights, perCoreLimit } = e.data;\r\n  const result = optimizeRoundRobinTargets(cores, gems, role, weights, perCoreLimit);\r\n  globalThis.postMessage(result);\r\n};\r\n"],"names":["CORE_SUPPLY","HERO","LEGEND","RELIC","ANCIENT","CORE_THRESHOLDS","ROLE_KEYS","dealer","Set","support","DEFAULT_WEIGHTS","atk","add","boss","brand","allyDmg","allyAtk","sanitizeWeights","w","base","Object","keys","forEach","k","raw","num","Number","isFinite","combinations","arr","n","length","idx","Array","from","_","i","map","p","j","scoreCombo","combo","grade","role","weights","totalWill","reduce","s","g","_g$will","will","totalPoint","_g$point","point","thr","filter","t","thresholdsHit","roleSum","_g$o1v","_w$g$o1k","_g$o2v","_w$g$o2k","has","o1k","o1v","o2k","o2v","scoreGemForRole","score","optimizeRoundRobinTargets","cores","pool","perCoreLimit","arguments","undefined","W","minOf","Math","min","thresholdsOf","thrMax","ci","_ci$thr","max","emptyPick","list","order","enforcedIdx","c","enforceMin","candidatesFor","core","gemPool","minThreshold","supply","minOfGrade","effMin","effEnforce","all","maxPick","push","filtered","sort","a","b","maxThr","enumerateCoreCombos","ta","tb","slice","allCandidates","trySolve","enforceSet","blockedSet","best","used","backtrack","pos","picksAcc","sumThrAcc","sumPointAcc","sumWillAcc","roleSumAcc","thrVec","ptVec","_cores$coreIdx$minThr","_cores$idx$minThresho","cand","picks","x","sumThr","sumPoint","sumWill","A","B","betterThan","coreIdx","isEnf","Infinity","candList","pick","clash","id","prev","delete","fill","enforcedSetFull","bestFull","lowestIdx","bestDropLowest","infeasibleEnforced","_cores$idx$minThresho2","indexOf","some","bestReduced","globalThis","onmessage","e","gems","data","result","postMessage"],"sourceRoot":""}