{"version":3,"file":"static/js/290.345c6231.chunk.js","mappings":"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","sources":["lib/optimizerCore.js","workers/optimizer.worker.js"],"sourcesContent":["// src/lib/optimizerCore.js\r\n/* =============================== 타입(주석용 정의) =============================== */\r\n/** @typedef {\"dealer\"|\"support\"} Role */\r\n/** @typedef {\"atk\"|\"add\"|\"boss\"|\"brand\"|\"allyDmg\"|\"allyAtk\"} OptionKey */\r\n/** @typedef {\"HERO\"|\"LEGEND\"|\"RELIC\"|\"ANCIENT\"} CoreGrade */\r\n/** @typedef {{id:string, will:number|null, point:number|null, o1k:OptionKey, o1v:number|null, o2k:OptionKey, o2v:number|null}} Gem */\r\n/** @typedef {{[k in OptionKey]: number}} Weights */\r\n/** @typedef {{ id:string, name:string, grade:CoreGrade, minThreshold?:number, enforceMin:boolean, supply?: number }} CoreDef */\r\n/** @typedef {{ list: Gem[], totalWill:number, totalPoint:number, thr:number[], roleSum:number, score:number }} ComboInfo */\r\n\r\n/* =============================== 상수 정의 =============================== */\r\n// 기본값(미선택 시 사용)\r\nexport const CORE_SUPPLY = { HERO: 7, LEGEND: 11, RELIC: 15, ANCIENT: 17 };\r\n// 등급별 “선택 가능한 공급 의지력” 목록\r\nexport const CORE_SUPPLY_OPTIONS = {\r\n  HERO: [7, 9],\r\n  LEGEND: [11, 12],\r\n  RELIC: [15],\r\n  ANCIENT: [17],\r\n};\r\nexport const CORE_THRESHOLDS = {\r\n  HERO: [10],\r\n  LEGEND: [10, 14],\r\n  RELIC: [10, 14, 17, 18, 19, 20],\r\n  ANCIENT: [10, 14, 17, 18, 19, 20],\r\n};\r\nexport const CORE_LABEL = { HERO: \"영웅\", LEGEND: \"전설\", RELIC: \"유물\", ANCIENT: \"고대\" };\r\nexport const GRADES = [\"HERO\", \"LEGEND\", \"RELIC\", \"ANCIENT\"];\r\nexport const OPTION_LABELS = {\r\n  atk: \"공격력\",\r\n  add: \"추가 피해\",\r\n  boss: \"보스 피해\",\r\n  brand: \"낙인력\",\r\n  allyDmg: \"아군 피해 강화\",\r\n  allyAtk: \"아군 공격 강화\",\r\n};\r\nexport const OPTIONS = [\"atk\", \"add\", \"boss\", \"brand\", \"allyDmg\", \"allyAtk\"];\r\nexport const ROLE_KEYS = {\r\n  dealer: new Set([\"atk\", \"add\", \"boss\"]),\r\n  support: new Set([\"brand\", \"allyDmg\", \"allyAtk\"]),\r\n};\r\n\r\n/** 딜러 프리셋(가중치; 배율) */\r\nexport const DEALER_WEIGHTS = {\r\n  boss: 1,\r\n  add: 1,\r\n  atk: 1,\r\n  brand: 0,\r\n  allyDmg: 0,\r\n  allyAtk: 0,\r\n};\r\n/** 기본 가중치는 = 딜러 프리셋 */\r\nexport const DEFAULT_WEIGHTS = { ...DEALER_WEIGHTS };\r\n\r\n/** 딜러: 옵션 레벨 → 퍼센트 커브 */\r\nexport const DEALER_LEVEL_CURVES = {\r\n  // key 는 OPTIONS 의 실제 키와 일치해야 합니다.\r\n  boss: [0, 0.078, 0.156, 0.244, 0.313, 0.391], // 보스 피해\r\n  add:  [0, 0.060, 0.119, 0.187, 0.239, 0.299], // 추가 피해\r\n  atk:  [0, 0.029, 0.067, 0.105, 0.134, 0.172], // 공격력\r\n};\r\n\r\n/** 서포터: 옵션 레벨 → 유효율(커브) */\r\nexport const SUPPORT_LEVEL_CURVES = {\r\n  // 낙인력\r\n  brand:   [0, 0.167, 0.334, 0.501, 0.668, 0.835],\r\n  // 아군 공격 강화\r\n  allyAtk: [0, 0.130, 0.260, 0.390, 0.520, 0.650],\r\n  // 아군 피해 강화\r\n  allyDmg: [0, 0.052, 0.104, 0.156, 0.208, 0.260],\r\n};\r\n\r\n/* =============================== 유틸/헬퍼 =============================== */\r\nexport function roleAllowsKey(role, key) {\r\n  const allow = ROLE_KEYS?.[role];\r\n  if (!allow) return true;                               // 미정의면 모두 허용\r\n  if (Array.isArray(allow)) return allow.includes(key);  // 배열\r\n  if (allow && typeof allow.has === 'function') return allow.has(key); // Set\r\n  if (allow && typeof allow === 'object') return !!allow[key]; // { atk:true } 객체\r\n  return true;\r\n}\r\n\r\nexport function sanitizeWeights(w) {\r\n  const base = { ...DEFAULT_WEIGHTS };\r\n  if (!w) return base;\r\n  Object.keys(base).forEach((k) => {\r\n    const raw = w[k];\r\n    const num = typeof raw === 'number' ? raw : Number(raw);\r\n    base[k] = Number.isFinite(num) && num >= 0 ? num : DEFAULT_WEIGHTS[k];\r\n  });\r\n  return /** @type {Weights} */(base);\r\n}\r\n\r\nexport function levelValueByRole(role, key, lvl) {\r\n  const L = Math.max(0, Math.min(5, Number(lvl) || 0));\r\n\r\n  // 딜러: 사전 정의된 퍼센트 커브\r\n  if (role === 'dealer' && DEALER_LEVEL_CURVES[key]) {\r\n    return DEALER_LEVEL_CURVES[key][L] || 0;\r\n  }\r\n\r\n  // 서포터: 사전 정의된 유효율 커브\r\n  if (role === 'support' && SUPPORT_LEVEL_CURVES[key]) {\r\n    return SUPPORT_LEVEL_CURVES[key][L] || 0;\r\n  }\r\n\r\n  // 그 외: 선형(레벨 숫자 그대로)\r\n  return L;\r\n}\r\n\r\nexport function scoreGemForRole(gem, role, weights) {\r\n  const w = sanitizeWeights(weights || {});\r\n  let sum = 0;\r\n\r\n  const add = (key, lvl) => {\r\n    if (!key || !lvl) return;\r\n    if (role && !roleAllowsKey(role, key)) return;\r\n\r\n    const basePct = levelValueByRole(role, key, lvl); // 레벨→퍼센트(커브/선형)\r\n    const scale   = w[key] ?? 0;                      // 가중치(배율)\r\n    sum += basePct * scale;\r\n  };\r\n\r\n  add(gem.o1k, gem.o1v);\r\n  add(gem.o2k, gem.o2v);\r\n\r\n  // 퍼센트 값으로 반환 (상위 UI에서 toFixed(4) + '%' 처리)\r\n  return sum;\r\n}\r\n\r\nexport function* combinations(arr, k) {\r\n  const n = arr.length; if (k > n) return;\r\n  const idx = Array.from({ length: k }, (_, i) => i);\r\n  while (true) {\r\n    yield idx.map(i => arr[i]);\r\n    let p = k - 1;\r\n    while (p >= 0 && idx[p] === n - k + p) p--;\r\n    if (p < 0) break;\r\n    idx[p]++;\r\n    for (let j = p + 1; j < k; j++) idx[j] = idx[j - 1] + 1;\r\n  }\r\n}\r\n\r\nexport function thresholdsHit(grade, totalPoint) {\r\n  const th = CORE_THRESHOLDS[grade];\r\n  return th.filter(t => totalPoint >= t);\r\n}\r\n\r\nexport function scoreCombo(combo, grade, role, weights) {\r\n  const totalWill = combo.reduce((s, g) => s + ((g.will ?? 0)), 0);\r\n  const totalPoint = combo.reduce((s, g) => s + ((g.point ?? 0)), 0);\r\n  const thr = thresholdsHit(grade, totalPoint);\r\n  const roleSum = combo.reduce((s, g) => s + scoreGemForRole(g, role, weights), 0);\r\n  const score = (thr.length * 10_000_000)\r\n    + (totalPoint * 10_000)\r\n    + ((5_000 - totalWill) * 10)\r\n    + roleSum\r\n    - combo.length;\r\n  return { totalWill, totalPoint, thr, roleSum, score };\r\n}\r\n\r\n/* 단일 코어 후보 산출 (통일 정책: 달성 구간이 없으면 결과 없음) */\r\n // 마지막 인자로 공급 의지력 오버라이드(선택값)를 받을 수 있게 함\r\n export function enumerateCoreCombos( pool, grade, role, weights, minThreshold, enforceMin, onStep, supplyOverride ) {\r\n  const supply = (supplyOverride ?? CORE_SUPPLY[grade]);\r\n  const W = sanitizeWeights(weights);\r\n\r\n  /** @type {ComboInfo[]} */\r\n  const all = [];\r\n  const maxPick = Math.min(4, pool.length);\r\n\r\n  for (let k = 0; k <= maxPick; k++) {\r\n    if (k === 0) {\r\n      all.push({ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 });\r\n      continue;\r\n    }\r\n    for (const combo of combinations(pool, k)) {\r\n      onStep && onStep(1);\r\n      const totalWill = combo.reduce((s, g) => s + (g.will || 0), 0);\r\n      if (totalWill > supply) continue;\r\n      const { totalPoint, thr, roleSum, score } = scoreCombo(combo, grade, role, W);\r\n      all.push({ list: combo, totalWill, totalPoint, thr, roleSum, score });\r\n    }\r\n  }\r\n\r\n  all.sort((a, b) => b.score - a.score);\r\n\r\n  // UI 정책에 맞춘 필터링\r\n  let filtered;\r\n\r\n  if (enforceMin) {\r\n    // '이상 탐색' 모드 (체크박스 ON)\r\n    const minOfGrade = Math.min(...CORE_THRESHOLDS[grade]);\r\n    const effMin = minThreshold ?? minOfGrade; // 목표가 없으면 등급 최소치\r\n    filtered = all.filter(ci =>\r\n      ci.totalPoint >= effMin && ci.thr.length > 0 && ci.list.length > 0\r\n    );\r\n  } else {\r\n    // '정확히 일치' 모드 (체크박스 OFF, 기본)\r\n    if (minThreshold != null) {\r\n      filtered = all.filter(ci =>\r\n        ci.totalPoint === minThreshold && ci.list.length > 0\r\n      );\r\n    } else {\r\n      // 목표 없음: 달성 구간 있는 케이스만\r\n      filtered = all.filter(ci => ci.thr.length > 0 && ci.list.length > 0);\r\n    }\r\n  }\r\n\r\n  if (filtered.length === 0) {\r\n    return [{ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 }];\r\n  }\r\n\r\n  return filtered;\r\n}\r\n\r\n/**\r\n * 여러 코어의 조합(ComboInfo[])을 한 번에 넣고\r\n * 딜러의 최종 데미지 배율(곱연산)을 계산합니다.\r\n * @param {ComboInfo[]} fullCombination\r\n * @param {Weights} weights\r\n * @returns {number}\r\n */\r\nexport function calculateDealerGlobalScore(fullCombination, weights) {\r\n  const W = sanitizeWeights(weights);\r\n  const total = { atk: 0, add: 0, boss: 0 };\r\n\r\n  for (const coreCombo of fullCombination || []) {\r\n    for (const gem of coreCombo.list || []) {\r\n      if (gem.o1k && total.hasOwnProperty(gem.o1k)) total[gem.o1k] += gem.o1v || 0;\r\n      if (gem.o2k && total.hasOwnProperty(gem.o2k)) total[gem.o2k] += gem.o2v || 0;\r\n    }\r\n  }\r\n\r\n  const atkPct  = levelValueByRole('dealer', 'atk',  total.atk);\r\n  const addPct  = levelValueByRole('dealer', 'add',  total.add);\r\n  const bossPct = levelValueByRole('dealer', 'boss', total.boss);\r\n\r\n  return (1 + atkPct * W.atk) * (1 + addPct * W.add) * (1 + bossPct * W.boss);\r\n}","// src/workers/optimizer.worker.js\r\n/* eslint-env worker, es2020 */\r\nimport { enumerateCoreCombos, CORE_THRESHOLDS, sanitizeWeights, calculateDealerGlobalScore } from \"../lib/optimizerCore.js\";\r\n\r\nconst thrMax = (ci) => (ci?.thr?.length ? Math.max(...ci.thr) : 0);\r\nconst minOf = (g) => Math.min(...CORE_THRESHOLDS[g]);\r\nconst now = () => (globalThis.performance?.now?.() ?? Date.now());\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nfunction clash(pick, usedSet) {\r\n  for (const g of pick.list) if (usedSet.has(g.id)) return true;\r\n  return false;\r\n}\r\n\r\n// emit을 너무 자주 보내지 않도록 간단 throttle\r\nfunction makeThrottledEmit(emit, minMs = 16) {\r\n  let last = 0;\r\n  return (payload, force = false) => {\r\n    const t = now();\r\n    if (force || t - last >= minMs) {\r\n      last = t;\r\n      emit(payload);\r\n    }\r\n  };\r\n}\r\n\r\n// 정렬 comparator를 루프 밖으로 (ESLint 안정성/성능)\r\nconst comboCmp = (a, b) => {\r\n  const ta = thrMax(a), tb = thrMax(b);\r\n  if (ta !== tb) return tb - ta;\r\n  if (a.totalPoint !== b.totalPoint) return b.totalPoint - a.totalPoint;\r\n  if (a.roleSum !== b.roleSum) return b.roleSum - a.roleSum;\r\n  return a.totalWill - b.totalWill;\r\n};\r\n\r\n/**\r\n* 후보 생성: 코어별로 프레임 양보하면서 진행 브로드캐스트\r\n* - gen 단계는 전체 후보 조합 수를 알 수 있으니 **결정형 퍼센트(done/total)** 제공\r\n* - 동시에 코어별 상세(코어 n/m, x/y, 속도/ETA)도 함께 전송\r\n*/\r\nasync function buildAllCandidates({ cores, pool, role, weights, perCoreLimit, emitOverall }) {\r\n  const n = pool.length;\r\n  const maxPick = Math.min(4, n);\r\n\r\n  const nCk = (N, K) => {\r\n    let c = 1;\r\n    for (let i = 1; i <= K; i++) c = (c * (N - i + 1)) / i;\r\n    return Math.floor(c);\r\n  };\r\n\r\n  // 한 코어당 이론상 생성할 조합 개수(1~4개 선택 합)\r\n  const totalCombosPerCore = Array.from({ length: maxPick }, (_, i) => nCk(n, i + 1))\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  // 전체(gen) 퍼센트용 총량\r\n  const totalGenAll = totalCombosPerCore * cores.length;\r\n\r\n  let doneCombos = 0;\r\n  const candidatesPerCore = [];\r\n\r\n  const state = {\r\n    coreIndex: 0,\r\n    coreCount: cores.length,\r\n    coreDone: 0,\r\n    coreTotal: 0,\r\n    t0: 0,\r\n  };\r\n\r\n  // 루프 밖 단일 onTick (ESLint no-loop-func 대응)\r\n  const onTick = () => {\r\n    // 전역(doneCombos) & 코어별 진행 증가\r\n    doneCombos += 1;\r\n    state.coreDone += 1;\r\n\r\n    const elapsedMs = now() - state.t0;\r\n    const showSpeed = elapsedMs >= 250 && state.coreDone >= Math.min(1000, state.coreTotal * 0.05);\r\n    const rate = showSpeed ? (state.coreDone / (elapsedMs / 1000)) : null;\r\n    const etaMs = showSpeed && rate ? Math.max(0, (state.coreTotal - state.coreDone) / rate) * 1000 : null;\r\n\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${cores[state.coreIndex - 1]?.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,        // ✅ 결정형\r\n      done: doneCombos,          // ✅ 전체(gen) 진행수\r\n      total: totalGenAll,         // ✅ 전체(gen) 총량\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal,\r\n      rate, elapsedMs, etaMs\r\n    });\r\n  };\r\n\r\n  // 코어별로 순차 생성 + 프레임 양보\r\n  for (let idx = 0; idx < cores.length; idx++) {\r\n    const core = cores[idx];\r\n\r\n    state.coreIndex = idx + 1;\r\n    state.coreDone = 0;\r\n    state.coreTotal = totalCombosPerCore; // 동일 풀 기준 이론 총량\r\n    state.t0 = now();\r\n\r\n    // 시작 알림 (렌더 기회) — 결정형 퍼센트 0%에서 시작\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n\r\n    const list = enumerateCoreCombos(\r\n       pool, core.grade, role, weights, core.minThreshold, core.enforceMin, onTick, core.supply\r\n    )\r\n      .filter((ci) => ci.list.length > 0 && ci.thr.length > 0)\r\n      .sort(comboCmp)\r\n      .slice(0, perCoreLimit);\r\n\r\n    candidatesPerCore[idx] = list;\r\n\r\n    // 코어 종료 스냅샷(강제 1회) + 프레임 양보\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreTotal,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n  }\r\n\r\n  return { candidatesPerCore, totalGenAll, doneCombos };\r\n}\r\n\r\n/**\r\n* 최적 배치 탐색 (개선된 Fallback 로직 적용)\r\n* - 비결정형으로 진행하되, 매 브로드캐스트마다 **pulse(카운터)** 를 증가시켜 탐색량을 시각화\r\n*/\r\nasync function solveWithAdvancedFallback({ cores, pool, role, weights, perCoreLimit, emit }) {\r\n  const order = cores.map((_, i) => i);\r\n  const throttled = makeThrottledEmit(emit, 24);\r\n\r\n  // 1) 후보 생성\r\n  const { candidatesPerCore } = await buildAllCandidates({\r\n    cores, pool, role, weights, perCoreLimit, emitOverall: throttled,\r\n  });\r\n  const allCandidates = candidatesPerCore;\r\n\r\n  // 2) 탐색 준비\r\n  let pulse = 0;\r\n  const emitSearchProgress = (force = false) => {\r\n    pulse++;\r\n    throttled({\r\n      type: \"progress\",\r\n      phase: \"search\",\r\n      label: \"최적 배치 탐색 중…\",\r\n      indeterminate: true,\r\n      pulse\r\n    }, force);\r\n  };\r\n  emitSearchProgress(true); // 탐색 시작 알림 (pulse 1)\r\n\r\n  // 3) 탐색 로직 (백트래킹)\r\n  const emptyPick = { list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 };\r\n  function betterThan(A, B, role) {\r\n    if (!B) return true;\r\n    if (role === 'dealer') {\r\n      if (A.globalScore !== B.globalScore) return A.globalScore > B.globalScore;\r\n      // 동점일 때는 기존 tie-breaker 유지\r\n      if (A.sumThr !== B.sumThr) return A.sumThr > B.sumThr;\r\n      for (let i = 0; i < A.thrVec.length; i++) if (A.thrVec[i] !== B.thrVec[i]) return A.thrVec[i] > B.thrVec[i];\r\n      if (A.sumPoint !== B.sumPoint) return A.sumPoint > B.sumPoint;\r\n      for (let i = 0; i < A.ptVec.length; i++) if (A.ptVec[i] !== B.ptVec[i]) return A.ptVec[i] > B.ptVec[i];\r\n      if (A.roleSum !== B.roleSum) return A.roleSum > B.roleSum;\r\n      if (A.sumWill !== B.sumWill) return A.sumWill < B.sumWill;\r\n      return false;\r\n    }\r\n    // support 등은 기존 규칙\r\n    if (A.sumThr !== B.sumThr) return A.sumThr > B.sumThr;\r\n    for (let i = 0; i < A.thrVec.length; i++) if (A.thrVec[i] !== B.thrVec[i]) return A.thrVec[i] > B.thrVec[i];\r\n    if (A.sumPoint !== B.sumPoint) return A.sumPoint > B.sumPoint;\r\n    for (let i = 0; i < A.ptVec.length; i++) if (A.ptVec[i] !== B.ptVec[i]) return A.ptVec[i] > B.ptVec[i];\r\n    if (A.roleSum !== B.roleSum) return A.roleSum > B.roleSum;\r\n    if (A.sumWill !== B.sumWill) return A.sumWill < B.sumWill;\r\n    return false;\r\n  }\r\n\r\n  // 백트래킹 솔버\r\n  function trySolve(enforceSet, blockedSet = new Set()) {\r\n    let best = null;\r\n    const used = new Set();\r\n\r\n    function backtrack(pos, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec) {\r\n      emitSearchProgress();\r\n\r\n      if (pos === order.length) {\r\n        for (const idx of enforceSet) {\r\n          const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n          const t = thrMax(picksAcc[idx]);\r\n          if (t < effMin) return;\r\n        }\r\n        // 딜러라면 글로벌 곱연산 점수를 계산\r\n        const globalScore = (role === 'dealer')\r\n          ? calculateDealerGlobalScore(picksAcc.filter(p => p && p.list && p.list.length > 0), weights)\r\n          : null;\r\n\r\n        const cand = {\r\n          picks: picksAcc.map(x => x),\r\n          sumThr: sumThrAcc, sumPoint: sumPointAcc, sumWill: sumWillAcc, roleSum: roleSumAcc,\r\n          thrVec: thrVec.slice(), ptVec: ptVec.slice(),\r\n          globalScore\r\n        };\r\n        if (betterThan(cand, best, role)) best = cand;\r\n        return;\r\n      }\r\n\r\n      const coreIdx = order[pos];\r\n      const isEnf = enforceSet.has(coreIdx);\r\n      const effMin = isEnf ? (cores[coreIdx].minThreshold ?? minOf(cores[coreIdx].grade)) : -Infinity;\r\n\r\n      if (blockedSet.has(coreIdx)) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n        return;\r\n      }\r\n\r\n      const candList = allCandidates[pos] || [];\r\n      for (const pick of candList) {\r\n        const t = thrMax(pick);\r\n        if (isEnf && t < effMin) continue;\r\n        if (clash(pick, used)) continue;\r\n\r\n        pick.list.forEach(g => used.add(g.id));\r\n        const prev = picksAcc[coreIdx];\r\n        picksAcc[coreIdx] = pick;\r\n        thrVec[pos] = t;\r\n        ptVec[pos] = pick.totalPoint;\r\n\r\n        backtrack(pos + 1, picksAcc, sumThrAcc + t, sumPointAcc + pick.totalPoint, sumWillAcc + pick.totalWill, roleSumAcc + pick.roleSum, thrVec, ptVec);\r\n\r\n        pick.list.forEach(g => used.delete(g.id));\r\n        picksAcc[coreIdx] = prev;\r\n        thrVec[pos] = 0;\r\n        ptVec[pos] = 0;\r\n      }\r\n\r\n      if (!isEnf) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n      }\r\n    }\r\n\r\n    backtrack(0, cores.map(() => emptyPick), 0, 0, 0, 0, Array(order.length).fill(0), Array(order.length).fill(0));\r\n    return best;\r\n  }\r\n\r\n  // --- 메인 해결 로직 (Fallback 적용) ---\r\n  const enforcedIdx = cores.map((c, i) => (c.enforceMin ? i : -1)).filter(i => i !== -1);\r\n\r\n  // 1) 전체 강제조건을 만족하는 해 시도\r\n  const enforcedSetFull = new Set(enforcedIdx);\r\n  const bestFull = trySolve(enforcedSetFull);\r\n  if (bestFull) {\r\n    return { picks: bestFull.picks, score: (role === 'dealer' ? bestFull.globalScore : undefined) };\r\n  }\r\n\r\n  // 2) 1번 실패 시, 최하위 우선순위 코어를 포기하고 재시도\r\n  if (order.length > 0) {\r\n    const lowestIdx = order[order.length - 1];\r\n    // 최하위 코어가 강제 대상이었을 때만 의미가 있음\r\n    if (enforcedSetFull.has(lowestIdx)) {\r\n      const enforcedMinusLowest = new Set([...enforcedSetFull].filter(i => i !== lowestIdx));\r\n      const bestDropLowest = trySolve(enforcedMinusLowest, new Set([lowestIdx]));\r\n      if (bestDropLowest) {\r\n        const finalPicks = bestDropLowest.picks.map((p, i) => (i === lowestIdx ? emptyPick : (p || emptyPick)));\r\n        const finalScore = (role === 'dealer')\r\n          ? calculateDealerGlobalScore(finalPicks.filter(p => p && p.list && p.list.length > 0), weights)\r\n          : undefined;\r\n        return { picks: finalPicks, score: finalScore };\r\n      }\r\n    }\r\n  }\r\n\r\n  // 3) 그래도 실패 시: 애초에 달성 불가능한 강제 조건이 있는지 판별\r\n  const infeasibleEnforced = new Set();\r\n  for (const idx of enforcedIdx) {\r\n    const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n    const pos = order.indexOf(idx);\r\n    const hasFeasibleCandidate = (allCandidates[pos] || []).some(ci => thrMax(ci) >= effMin);\r\n    if (!hasFeasibleCandidate) {\r\n      infeasibleEnforced.add(idx);\r\n    }\r\n  }\r\n\r\n  // 4) 달성 가능한 강제 조건만 걸고 재시도\r\n  const enforcedSetReduced = new Set(enforcedIdx.filter(i => !infeasibleEnforced.has(i)));\r\n  const bestReduced = trySolve(enforcedSetReduced);\r\n\r\n  if (bestReduced) {\r\n    const finalPicks = bestReduced.picks.map((p, i) => (infeasibleEnforced.has(i) ? emptyPick : (p || emptyPick)));\r\n    const finalScore = (role === 'dealer')\r\n      ? calculateDealerGlobalScore(finalPicks.filter(p => p && p.list && p.list.length > 0), weights)\r\n      : undefined;\r\n    return { picks: finalPicks, score: finalScore };\r\n  }\r\n\r\n  // 5) 최종 안전망\r\n  return { picks: cores.map(() => emptyPick) };\r\n}\r\n\r\nglobalThis.onmessage = async (e) => {\r\n  const { type = \"run\", cores, gems, role, weights, perCoreLimit } = e.data;\r\n  const emit = (msg) => globalThis.postMessage(msg);\r\n\r\n  try {\r\n    if (type === \"kickoff\") {\r\n      // 워밍업만 수행하고 UI 갱신은 하지 않음\r\n      return;\r\n    }\r\n\r\n    const result = await solveWithAdvancedFallback({\r\n      cores,\r\n      pool: gems,\r\n      role,\r\n      weights: sanitizeWeights(weights),\r\n      perCoreLimit,\r\n      emit,\r\n    });\r\n\r\n    emit({ type: \"result\", ...result });\r\n  } catch (err) {\r\n    console.error(\"Worker error:\", err);\r\n    emit({ type: \"error\", error: String(err?.message || err) });\r\n  }\r\n};"],"names":["CORE_SUPPLY","HERO","LEGEND","RELIC","ANCIENT","CORE_THRESHOLDS","ROLE_KEYS","dealer","Set","support","DEFAULT_WEIGHTS","boss","add","atk","brand","allyDmg","allyAtk","DEALER_LEVEL_CURVES","SUPPORT_LEVEL_CURVES","sanitizeWeights","w","base","Object","keys","forEach","k","raw","num","Number","isFinite","levelValueByRole","role","key","lvl","L","Math","max","min","scoreGemForRole","gem","weights","sum","_w$key","allow","Array","isArray","includes","has","roleAllowsKey","basePct","scale","o1k","o1v","o2k","o2v","combinations","arr","n","length","idx","from","_","i","map","p","j","scoreCombo","combo","grade","totalWill","reduce","s","g","_g$will","will","totalPoint","_g$point","point","thr","filter","t","thresholdsHit","roleSum","score","enumerateCoreCombos","pool","minThreshold","enforceMin","onStep","supplyOverride","supply","W","all","maxPick","push","list","filtered","sort","a","b","minOfGrade","effMin","ci","calculateDealerGlobalScore","fullCombination","total","coreCombo","hasOwnProperty","atkPct","addPct","bossPct","thrMax","_ci$thr","minOf","now","_globalThis$performan","_globalThis$performan2","_globalThis$performan3","globalThis","performance","call","Date","sleep","ms","Promise","r","setTimeout","clash","pick","usedSet","id","comboCmp","ta","tb","async","buildAllCandidates","_ref","cores","perCoreLimit","emitOverall","totalCombosPerCore","nCk","N","K","c","floor","totalGenAll","doneCombos","candidatesPerCore","state","coreIndex","coreCount","coreDone","coreTotal","t0","onTick","_cores","elapsedMs","showSpeed","rate","etaMs","type","phase","label","name","indeterminate","done","core","slice","solveWithAdvancedFallback","_ref2","emit","order","throttled","minMs","arguments","undefined","last","payload","force","makeThrottledEmit","allCandidates","pulse","emitSearchProgress","emptyPick","trySolve","enforceSet","blockedSet","best","used","backtrack","pos","picksAcc","sumThrAcc","sumPointAcc","sumWillAcc","roleSumAcc","thrVec","ptVec","_cores$coreIdx$minThr","_cores$idx$minThresho","globalScore","cand","picks","x","sumThr","sumPoint","sumWill","A","B","betterThan","coreIdx","isEnf","Infinity","candList","prev","delete","fill","enforcedIdx","enforcedSetFull","bestFull","lowestIdx","bestDropLowest","finalPicks","finalScore","infeasibleEnforced","_cores$idx$minThresho2","indexOf","some","bestReduced","onmessage","gems","e","data","msg","postMessage","err","console","error","String","message"],"sourceRoot":""}