{"version":3,"file":"static/js/257.59e4d394.chunk.js","mappings":"2GASA,MAAMA,EAAsBC,GAC1B,IAAIC,QAAQ,CAACC,EAASC,KACpB,MAAMC,EAAa,IAAIC,WACvBD,EAAWE,OAAS,KAClBJ,EAAQE,EAAWG,SAErBH,EAAWI,QAAUC,IAAqC,IAAlCC,QAAUC,OAAO,KAAEC,KAAUH,EACnDN,EAAOU,MAAM,gCAAgCD,OAE/CR,EAAWU,kBAAkBd,KAW3Be,EAAYC,UAChB,IAAIC,EAAOC,EACX,GAAqB,qBAAVA,EACT,MAAO,YAGT,GAAqB,kBAAVA,EAET,GAAI,yCAAyCC,KAAKD,GAChDD,EAAOG,KAAKF,EAAMG,MAAM,KAAK,IAC1BA,MAAM,IACNC,IAAKC,GAAMA,EAAEC,WAAW,QACtB,CACL,MAAMC,QAAaC,MAAMR,GACzBD,QAAaQ,EAAKE,aACpB,MACK,GAA2B,qBAAhBC,aAA+BV,aAAiBU,YAC1C,QAAlBV,EAAMW,UACRZ,QAAaF,EAAUG,EAAMY,MAET,UAAlBZ,EAAMW,UACRZ,QAAaF,EAAUG,EAAMa,SAET,WAAlBb,EAAMW,eACF,IAAI5B,QAASC,IACjBgB,EAAMc,OAAOhB,UACXC,QAAalB,EAAmBC,GAChCE,aAID,GAA+B,qBAApB+B,iBAAmCf,aAAiBe,gBAAiB,CACrF,MAAMjC,QAAakB,EAAMgB,gBACzBjB,QAAalB,EAAmBC,EAClC,MAAWkB,aAAiBiB,MAAQjB,aAAiBkB,QACnDnB,QAAalB,EAAmBmB,IAGlC,OAAO,IAAImB,WAAWpB,IAGxBqB,EAAOC,QAAUxB,C,iBC1DjB,MAAMyB,EAAkBC,EAAQ,MAC1BC,EAAeD,EAAQ,MACvBE,EAAYF,EAAQ,MACpBG,EAAYH,EAAQ,MACpBI,EAAMJ,EAAQ,MACdK,EAAML,EAAQ,OACd,WAAEM,GAAeN,EAAQ,MAE/BH,EAAOC,QAAU,CACfK,YACAC,MACAC,MACAN,kBACAE,eACAK,gBACGJ,E,uBCzBL,MAAMK,EAAYP,EAAQ,OACpB,IAAEQ,GAAQR,EAAQ,MAClBS,EAAQT,EAAQ,MAEtB,IAAIU,EAAmB,EAEvBb,EAAOC,QAAU,KACf,MAAMa,EAAKF,EAAM,YAAaC,GACxBE,EAAU,CAAC,EACXC,EAAiB,CAAC,EACxB,IAAIC,EAAW,GAEfJ,GAAoB,EAEpB,MACMK,EAAgBA,IAAMC,OAAOC,KAAKL,GAASM,OAE3CC,EAAUA,KACd,GAAwB,IAApBL,EAASI,OAAc,CACzB,MAAME,EAAOJ,OAAOC,KAAKL,GACzB,IAAK,IAAIS,EAAI,EAAGA,EAAID,EAAKF,OAAQG,GAAK,EACpC,GAAuC,qBAA5BR,EAAeO,EAAKC,IAAqB,CAClDP,EAAS,GAAGF,EAAQQ,EAAKC,KACzB,KACF,CAEJ,GAGIC,EAAQA,CAACC,EAAQC,IACrB,IAAIhE,QAAQ,CAACC,EAASC,KACpB,MAAM+D,EAAMlB,EAAU,CAAEgB,SAAQC,YAChCV,EAASY,KAAKnD,UACZuC,EAASa,QACTd,EAAee,EAAEjB,IAAMc,EACvB,IACEhE,QAAcmE,EAAEL,GAAQM,MAAMC,KAAM,IAAIN,EAASC,EAAId,KACvD,CAAE,MAAOoB,GACPrE,EAAOqE,EACT,CAAE,eACOlB,EAAee,EAAEjB,IACxBQ,GACF,IAEFX,EAAI,IAAIG,WAAYc,EAAId,kBACxBH,EAAI,IAAIG,uBAAwBG,EAASI,UACzCC,MA0BJ,MAAO,CACLa,UAvBiBJ,IACjBhB,EAAQgB,EAAEjB,IAAMiB,EAChBpB,EAAI,IAAIG,WAAYiB,EAAEjB,MACtBH,EAAI,IAAIG,yBAA0BI,OAClCI,IACOS,EAAEjB,IAmBTsB,OAhBa1D,eAAOgD,GACpB,GAAwB,IAApBR,IACF,MAAM3C,MAAM,IAAIuC,+DACjB,QAAAuB,EAAAC,UAAAjB,OAH8BM,EAAO,IAAAY,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAPb,EAAOa,EAAA,GAAAF,UAAAE,GAItC,OAAOf,EAAMC,EAAQC,EACvB,EAYEc,UAVgB/D,UAChByC,OAAOC,KAAKL,GAAS2B,QAAQhE,gBACrBqC,EAAQ4B,GAAKF,cAErBxB,EAAW,IAOX2B,YA9DkBA,IAAM3B,EAASI,OA+DjCH,iB,WCvEJlB,EAAOC,QAAU,CACf4C,eAAgB,EAChBC,UAAW,EACXC,wBAAyB,EACzBC,QAAS,E,WCVXhD,EAAOC,QAAU,CAACgD,EAAQC,IACxB,GAAGD,KAAUC,KAAOC,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAG,I,WCD1DtD,EAAOC,QAAWsD,IAChB,MAAMC,EAAM,CAAC,EAUb,MARiC,qBAAtBC,kBACTD,EAAIE,KAAO,YACkB,kBAAbC,SAChBH,EAAIE,KAAO,UACiB,kBAAZE,UAChBJ,EAAIE,KAAO,QAGM,qBAARH,EACFC,EAGFA,EAAID,G,iBCfb,MAAMnD,EAAeD,EAAQ,MAkB7BH,EAAOC,QAAU,CACf4D,UAjBgBnF,MAAOE,EAAOkF,EAAOC,KACrC,MAAMC,QAAe5D,EAAa0D,EAAO,EAAGC,GAC5C,OAAOC,EAAOH,UAAUjF,GACrBqF,QAAQvF,gBACDsF,EAAOvB,eAcjByB,OAVaxF,MAAOE,EAAOmF,KAC3B,MAAMC,QAAe5D,EAAa,MAAO,EAAG2D,GAC5C,OAAOC,EAAOE,OAAOtF,GAClBqF,QAAQvF,gBACDsF,EAAOvB,e,iBCdnB,MAAM0B,EAAUhE,EAAAA,MAAAA,GACViE,EAAiBjE,EAAQ,MAK/BH,EAAOC,QAAU,IACZmE,EACHC,WAAY,8CAA8CF,uB,iBCC5D,MAAMC,EAAiBjE,EAAQ,MACzBmE,EAAcnE,EAAQ,MACtBoE,EAAkBpE,EAAQ,MAC1BqE,EAAYrE,EAAQ,MACpBsE,EAAOtE,EAAQ,MACf1B,EAAY0B,EAAQ,MAE1BH,EAAOC,QAAU,CACfmE,iBACAE,cACAC,kBACAC,YACAC,OACAhG,Y,WCfFuB,EAAOC,QAAU9B,IAAmC,IAC9C6F,GADY,WAAEK,EAAU,cAAEK,GAAevG,EAE7C,GAAI2B,MAAQ6E,KAAOD,EAAe,CAChC,MAAMhH,EAAO,IAAIoC,KAAK,CAAC,kBAAkBuE,QAAkB,CACzDX,KAAM,2BAERM,EAAS,IAAIY,OAAOD,IAAIE,gBAAgBnH,GAC1C,MACEsG,EAAS,IAAIY,OAAOP,GAGtB,OAAOL,E,WCXThE,EAAOC,QAAW+D,IAChBA,EAAOvB,Y,iBCRT,MAAM7B,EAAQT,EAAQ,MAEtB,IAAI2E,EAAa,EAEjB9E,EAAOC,QAAU9B,IAIX,IAHJ2C,GAAIiE,EAAG,OACPrD,EAAM,QACNC,EAAU,CAAC,GACZxD,EACK2C,EAAKiE,EAMT,MALkB,qBAAPjE,IACTA,EAAKF,EAAM,MAAOkE,GAClBA,GAAc,GAGT,CACLhE,KACAY,SACAC,W,qBCpBS,IAAAqD,EAAA,KAEb,IAAIC,GAAU,EAEdhF,EAAQgF,QAAUA,EAElBhF,EAAQQ,WAAcyE,IACpBD,EAAUC,GAGZjF,EAAQU,IAAM,mBAAA0B,EAAAC,UAAAjB,OAAI8D,EAAI,IAAA5C,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJ2C,EAAI3C,GAAAF,UAAAE,GAAA,OAAMyC,EAAUG,QAAQzE,IAAIqB,MAAMgD,EAAMG,GAAQ,IAAI,C,WCL1EnF,EAAOC,QAAU,CACfoF,SAAU,IACVC,SAAU,IACVC,UAAW,IACXC,KAAM,IACNC,cAAe,IACfC,uBAAwB,IACxBC,aAAc,IACdC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,KACbC,YAAa,KACbC,gBAAiB,KACjBC,SAAU,K,4CCjBZlG,EAAOC,QAAU,CAAC+D,EAAQmC,KACxBnC,EAAOoC,UAAYjI,IAAc,IAAb,KAAEQ,GAAMR,EAC1BgI,EAAQxH,I,WCKZqB,EAAOC,QAAUvB,MAAOsF,EAAQqC,KAC9BrC,EAAOsC,YAAYD,G,WCRrBrG,EAAOC,QAAU,CAMfyE,eAAe,EACf6B,OAAQA,O,WC2GVvG,EAAOC,QAAU,CACfuG,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,SAAU,WACVC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,QAAS,UACTC,QAAS,UACTC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,QAAS,UACTC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,QAAS,UACTC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,QAAS,UACTC,IAAK,MACLC,IAAK,MACLC,SAAU,WACVC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,SAAU,WACVC,IAAK,MACLC,IAAK,M,iBCxNP,MAEMC,EAFoD,YAAxC3M,EAAQ,KAARA,CAA4B,QAEf4M,GAAM,IAAIpI,IAAIoI,EAAGC,OAAOC,SAASC,MAAOA,KAAOH,GAAKA,EAEnF/M,EAAOC,QAAW8D,IAChB,MAAMoJ,EAAO,IAAKpJ,GAMlB,MALA,CAAC,WAAY,aAAc,YAAYrB,QAASa,IAC1CQ,EAAQR,KACV4J,EAAK5J,GAAOuJ,EAAWK,EAAK5J,OAGzB4J,E,iBCXT,MAAMC,EAAejN,EAAQ,MACvBO,EAAYP,EAAQ,OACpB,IAAEQ,GAAQR,EAAQ,MAClBS,EAAQT,EAAQ,MAChBI,EAAMJ,EAAQ,OACd,eACJiE,EAAc,YACdE,EAAW,gBACXC,EAAe,UACfC,EAAS,UACT/F,EAAS,KACTgG,GACEtE,EAAQ,MAEZ,IAAIkN,EAAgB,EAEpBrN,EAAOC,QAAUvB,iBAA0E,IAAnEoF,EAAKxB,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG,MAAOiL,EAAGjL,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG/B,EAAIuC,UAAW0K,EAAQlL,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGmL,EAAMnL,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnF,MAAMxB,EAAKF,EAAM,SAAUyM,IACrB,OACJ9G,EAAM,aACNmH,KACG3J,GACDqJ,EAAa,IACZhJ,KACAoJ,IAECG,EAAW,CAAC,EAIZC,EAAgC,kBAAV9J,EAAqBA,EAAM/E,MAAM,KAAO+E,EACpE,IAAI+J,EAAaN,EACbO,EAAgBL,EACpB,MAAMM,EAAe,CAACxN,EAAIyC,QAASzC,EAAIuC,WAAWkL,SAAST,KAASxJ,EAAQkK,WAE5E,IAAIC,EACAC,EACJ,MAAMC,EAAY,IAAIzQ,QAAQ,CAACC,EAASC,KACtCsQ,EAAmBvQ,EACnBsQ,EAAkBrQ,IAIpB,IAAImG,EAASM,EAAYP,GACzBC,EAAO9F,QAHcmQ,IAAYH,EAAgBG,EAAMC,UAKvDjB,GAAiB,EAEjB,MAAMkB,EAAWpQ,IAAA,IAAG2C,GAAI0N,EAAK,OAAE9M,EAAM,QAAEC,GAASxD,EAAA,OAC9C,IAAIR,QAAQ,CAACC,EAASC,KACpB8C,EAAI,IAAIG,aAAc0N,aAAiB9M,KAGvCiM,EADkB,GAAGjM,KAAU8M,KACT,CAAE5Q,UAASC,UACjC4G,EAAKT,EAAQ,CACXyK,SAAU3N,EACV0N,QACA9M,SACAC,eA+CA+M,EAAuBA,CAACC,EAAQH,IAAUD,EAAS7N,EAAU,CACjEI,GAAI0N,EACJ9M,OAAQ,eACRC,QAAS,CACPmC,MAAO6K,EACP5K,QAAS,CACP6K,SAAU7K,EAAQ6K,SAClBC,SAAU9K,EAAQ8K,SAClBC,UAAW/K,EAAQ+K,UACnBC,YAAahL,EAAQgL,YACrBC,KAAMjL,EAAQiL,KACdC,SAAU,CAAC1O,EAAIyC,QAASzC,EAAIuC,WAAWkL,SAASH,KAC1C9J,EAAQmL,gBAKdC,EAAqBA,CAACR,EAAQS,EAAMC,EAASb,IACjDD,EAAS7N,EAAU,CACjBI,GAAI0N,EACJ9M,OAAQ,aACRC,QAAS,CAAEmC,MAAO6K,EAAQpB,IAAK6B,EAAM3B,OAAQ4B,MAyEjD7K,EAAUR,EAAQsL,IAEZ,IAFa,SACjBb,EAAQ,MAAED,EAAK,OAAEe,EAAM,OAAE7N,EAAM,KAAE/C,GAClC2Q,EACC,MAAME,EAAY,GAAG9N,KAAU8M,IAC/B,GAAe,YAAXe,EACF5O,EAAI,IAAI8N,gBAAuBD,KAC/Bb,EAAS6B,GAAW5R,QAAQ,CAAE4Q,QAAO7P,gBAC9BgP,EAAS6B,QACX,GAAe,WAAXD,EAAqB,CAI9B,GAHA5B,EAAS6B,GAAW3R,OAAOc,UACpBgP,EAAS6B,GACD,SAAX9N,GAAmBwM,EAAgBvP,IACnC+O,EAGF,MAAMnP,MAAMI,GAFZ+O,EAAa/O,EAIjB,KAAsB,aAAX4Q,GACThJ,EAAO,IAAK5H,EAAM8Q,UAAWjB,MAIjC,MAAMkB,EAAa,CACjB5O,KACAkD,SACA2L,KAjKWA,IACXvK,QAAQwK,KAAK,uFAiKbC,UAxJgBA,CAACC,EAAMC,EAAMvB,IAC7BD,EAAS7N,EAAU,CACjBI,GAAI0N,EACJ9M,OAAQ,KACRC,QAAS,CAAEqO,OAAQ,YAAa7K,KAAM,CAAC2K,EAAMC,OAqJ/CE,SAjJeA,CAACH,EAAMtB,IACtBD,EAAS7N,EAAU,CACjBI,GAAI0N,EACJ9M,OAAQ,KACRC,QAAS,CAAEqO,OAAQ,WAAY7K,KAAM,CAAC2K,EAAM,CAAEI,SAAU,aA8I1DC,WA1IiBA,CAACL,EAAMtB,IACxBD,EAAS7N,EAAU,CACjBI,GAAI0N,EACJ9M,OAAQ,KACRC,QAAS,CAAEqO,OAAQ,SAAU7K,KAAM,CAAC2K,OAuItCM,GAnISA,CAACJ,EAAQ7K,EAAMqJ,IACxBD,EAAS7N,EAAU,CACjBI,GAAI0N,EACJ9M,OAAQ,KACRC,QAAS,CAAEqO,SAAQ7K,WAgIrBkL,aAnGmB,WAAuC,IAAtCvM,EAAKxB,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG,MAAOiL,EAAGjL,UAAAjB,OAAA,EAAAiB,UAAA,QAAAgL,EAAEG,EAAMnL,UAAAjB,OAAA,EAAAiB,UAAA,QAAAgL,EAAEkB,EAAKlM,UAAAjB,OAAA,EAAAiB,UAAA,QAAAgL,EAErD,GAAIS,GAAgB,CAACxN,EAAIsC,eAAgBtC,EAAIwC,yBAAyBiL,SAAST,GAAM,MAAMhP,MAAM,4CAEjG,MAAM6Q,EAAO7B,GAAOM,EACpBA,EAAauB,EAEb,MAAMC,EAAU5B,GAAUK,EAC1BA,EAAgBuB,EAOhB,MACMV,GAD4B,kBAAV7K,EAAqBA,EAAM/E,MAAM,KAAO+E,GACxCwM,OAAQC,IAAO3C,EAAaI,SAASuC,IAG7D,OAFA3C,EAAa/L,QAAQ8M,GAEjBA,EAAOtN,OAAS,EACXqN,EAAqBC,EAAQH,GACjCgC,KAAK,IAAMrB,EAAmBrL,EAAOsL,EAAMC,EAASb,IAGlDW,EAAmBrL,EAAOsL,EAAMC,EAASb,EAClD,EA2EEiC,cAzEoB,WAAmB,OACvClC,EAAS7N,EAAU,CACjBI,GAFqCwB,UAAAjB,OAAA,EAAAiB,UAAA,QAAAgL,EAGrC5L,OAAQ,gBACRC,QAAS,CAAE+O,OAJcpO,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG,CAAC,KAK5B,EAqEHuB,UAlEgBnF,eAAOE,GAAK,IAAEuO,EAAI7K,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGqO,EAAMrO,UAAAjB,OAAA,QAAAiM,IAAAhL,UAAA,GAAAA,UAAA,GAAG,CAClDyN,MAAM,GACA,OACNxB,EAAS7N,EAAU,CACjBI,GAFIwB,UAAAjB,OAAA,EAAAiB,UAAA,QAAAgL,EAGJ5L,OAAQ,YACRC,QAAS,CAAE/C,YAAaH,EAAUG,GAAQmF,QAASoJ,EAAMwD,YACxD,EA4DHzM,OAzDaxF,MAAOE,EAAO4P,KAC3B,GAAIT,EAAc,MAAMxP,MAAM,gEAE9B,OAAOgQ,EAAS7N,EAAU,CACxBI,GAAI0N,EACJ9M,OAAQ,SACRC,QAAS,CAAE/C,YAAaH,EAAUG,QAoDpC6D,UAhDgB/D,UACD,OAAXsF,IAOFO,EAAgBP,GAChBA,EAAS,MAEJrG,QAAQC,YAjIK4Q,MA+KtB,OA9KED,EAAS7N,EAAU,CACjBI,GAAI0N,EAAO9M,OAAQ,OAAQC,QAAS,CAAEoC,QAAS,CAAEkL,SAAUlB,EAAc6C,SAAU7M,EAAQ6M,SAAU3L,QAASlB,EAAQkB,aAwKvHuL,KAAK,IAAM9B,EAAqB5K,IAChC0M,KAAK,IAAMrB,EAAmBrL,EAAOyJ,EAAKE,IAC1C+C,KAAK,IAAMrC,EAAiBuB,IAC5BmB,MAAM,QAEFzC,CACT,C","sources":["../node_modules/tesseract.js/src/worker/browser/loadImage.js","../node_modules/tesseract.js/src/index.js","../node_modules/tesseract.js/src/createScheduler.js","../node_modules/tesseract.js/src/constants/OEM.js","../node_modules/tesseract.js/src/utils/getId.js","../node_modules/tesseract.js/src/utils/getEnvironment.js","../node_modules/tesseract.js/src/Tesseract.js","../node_modules/tesseract.js/src/worker/browser/defaultOptions.js","../node_modules/tesseract.js/src/worker/browser/index.js","../node_modules/tesseract.js/src/worker/browser/spawnWorker.js","../node_modules/tesseract.js/src/worker/browser/terminateWorker.js","../node_modules/tesseract.js/src/createJob.js","../node_modules/tesseract.js/src/utils/log.js","../node_modules/tesseract.js/src/constants/PSM.js","../node_modules/tesseract.js/src/worker/browser/onMessage.js","../node_modules/tesseract.js/src/worker/browser/send.js","../node_modules/tesseract.js/src/constants/defaultOptions.js","../node_modules/tesseract.js/src/constants/languages.js","../node_modules/tesseract.js/src/utils/resolvePaths.js","../node_modules/tesseract.js/src/createWorker.js"],"sourcesContent":["'use strict';\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(image);\n      data = await resp.arrayBuffer();\n    }\n  } else if (typeof HTMLElement !== 'undefined' && image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas) {\n    const blob = await image.convertToBlob();\n    data = await readFromBlobOrFile(blob);\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n","'use strict';\n\n/**\n *\n * Entry point for tesseract.js, should be the entry when bundling.\n *\n * @fileoverview entry point for tesseract.js\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nrequire('regenerator-runtime/runtime');\nconst createScheduler = require('./createScheduler');\nconst createWorker = require('./createWorker');\nconst Tesseract = require('./Tesseract');\nconst languages = require('./constants/languages');\nconst OEM = require('./constants/OEM');\nconst PSM = require('./constants/PSM');\nconst { setLogging } = require('./utils/log');\n\nmodule.exports = {\n  languages,\n  OEM,\n  PSM,\n  createScheduler,\n  createWorker,\n  setLogging,\n  ...Tesseract,\n};\n","'use strict';\n\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => (\n    new Promise((resolve, reject) => {\n      const job = createJob({ action, payload });\n      jobQueue.push(async (w) => {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n        try {\n          resolve(await w[action].apply(this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n      log(`[${id}]: Add ${job.id} to JobQueue`);\n      log(`[${id}]: JobQueue length=${jobQueue.length}`);\n      dequeue();\n    })\n  );\n\n  const addWorker = (w) => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async (wid) => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers,\n  };\n};\n","'use strict';\n\n/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */\nmodule.exports = {\n  TESSERACT_ONLY: 0,\n  LSTM_ONLY: 1,\n  TESSERACT_LSTM_COMBINED: 2,\n  DEFAULT: 3,\n};\n","'use strict';\n\nmodule.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n","'use strict';\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (typeof WorkerGlobalScope !== 'undefined') {\n    env.type = 'webworker';\n  } else if (typeof document === 'object') {\n    env.type = 'browser';\n  } else if (typeof process === 'object' && typeof require === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n","'use strict';\n\nconst createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = await createWorker(langs, 1, options);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = await createWorker('osd', 0, options);\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n","'use strict';\n\nconst version = require('../../../package.json').version;\nconst defaultOptions = require('../../constants/defaultOptions');\n\n/*\n * Default options for browser worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: `https://cdn.jsdelivr.net/npm/tesseract.js@v${version}/dist/worker.min.js`,\n};\n","'use strict';\n\n/**\n *\n * Tesseract Worker adapter for browser\n *\n * @fileoverview Tesseract Worker adapter for browser\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = require('./defaultOptions');\nconst spawnWorker = require('./spawnWorker');\nconst terminateWorker = require('./terminateWorker');\nconst onMessage = require('./onMessage');\nconst send = require('./send');\nconst loadImage = require('./loadImage');\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  send,\n  loadImage,\n};\n","'use strict';\n\n/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n\n  return worker;\n};\n","'use strict';\n\n/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function terminate worker\n * @access public\n */\nmodule.exports = (worker) => {\n  worker.terminate();\n};\n","'use strict';\n\nconst getId = require('./utils/getId');\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n","'use strict';\n\nlet logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n","'use strict';\n\n/*\n * PSM = Page Segmentation Mode\n */\nmodule.exports = {\n  OSD_ONLY: '0',\n  AUTO_OSD: '1',\n  AUTO_ONLY: '2',\n  AUTO: '3',\n  SINGLE_COLUMN: '4',\n  SINGLE_BLOCK_VERT_TEXT: '5',\n  SINGLE_BLOCK: '6',\n  SINGLE_LINE: '7',\n  SINGLE_WORD: '8',\n  CIRCLE_WORD: '9',\n  SINGLE_CHAR: '10',\n  SPARSE_TEXT: '11',\n  SPARSE_TEXT_OSD: '12',\n  RAW_LINE: '13',\n};\n","'use strict';\n\nmodule.exports = (worker, handler) => {\n  worker.onmessage = ({ data }) => { // eslint-disable-line\n    handler(data);\n  };\n};\n","'use strict';\n\n/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */\nmodule.exports = async (worker, packet) => {\n  worker.postMessage(packet);\n};\n","'use strict';\n\nmodule.exports = {\n  /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */\n  workerBlobURL: true,\n  logger: () => {},\n};\n","'use strict';\n\n/*\n * languages with existing tesseract traineddata\n * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n */\n\n/**\n * @typedef {object} Languages\n * @property {string} AFR Afrikaans\n * @property {string} AMH Amharic\n * @property {string} ARA Arabic\n * @property {string} ASM Assamese\n * @property {string} AZE Azerbaijani\n * @property {string} AZE_CYRL Azerbaijani - Cyrillic\n * @property {string} BEL Belarusian\n * @property {string} BEN Bengali\n * @property {string} BOD Tibetan\n * @property {string} BOS Bosnian\n * @property {string} BUL Bulgarian\n * @property {string} CAT Catalan; Valencian\n * @property {string} CEB Cebuano\n * @property {string} CES Czech\n * @property {string} CHI_SIM Chinese - Simplified\n * @property {string} CHI_TRA Chinese - Traditional\n * @property {string} CHR Cherokee\n * @property {string} CYM Welsh\n * @property {string} DAN Danish\n * @property {string} DEU German\n * @property {string} DZO Dzongkha\n * @property {string} ELL Greek, Modern (1453-)\n * @property {string} ENG English\n * @property {string} ENM English, Middle (1100-1500)\n * @property {string} EPO Esperanto\n * @property {string} EST Estonian\n * @property {string} EUS Basque\n * @property {string} FAS Persian\n * @property {string} FIN Finnish\n * @property {string} FRA French\n * @property {string} FRK German Fraktur\n * @property {string} FRM French, Middle (ca. 1400-1600)\n * @property {string} GLE Irish\n * @property {string} GLG Galician\n * @property {string} GRC Greek, Ancient (-1453)\n * @property {string} GUJ Gujarati\n * @property {string} HAT Haitian; Haitian Creole\n * @property {string} HEB Hebrew\n * @property {string} HIN Hindi\n * @property {string} HRV Croatian\n * @property {string} HUN Hungarian\n * @property {string} IKU Inuktitut\n * @property {string} IND Indonesian\n * @property {string} ISL Icelandic\n * @property {string} ITA Italian\n * @property {string} ITA_OLD Italian - Old\n * @property {string} JAV Javanese\n * @property {string} JPN Japanese\n * @property {string} KAN Kannada\n * @property {string} KAT Georgian\n * @property {string} KAT_OLD Georgian - Old\n * @property {string} KAZ Kazakh\n * @property {string} KHM Central Khmer\n * @property {string} KIR Kirghiz; Kyrgyz\n * @property {string} KOR Korean\n * @property {string} KUR Kurdish\n * @property {string} LAO Lao\n * @property {string} LAT Latin\n * @property {string} LAV Latvian\n * @property {string} LIT Lithuanian\n * @property {string} MAL Malayalam\n * @property {string} MAR Marathi\n * @property {string} MKD Macedonian\n * @property {string} MLT Maltese\n * @property {string} MSA Malay\n * @property {string} MYA Burmese\n * @property {string} NEP Nepali\n * @property {string} NLD Dutch; Flemish\n * @property {string} NOR Norwegian\n * @property {string} ORI Oriya\n * @property {string} PAN Panjabi; Punjabi\n * @property {string} POL Polish\n * @property {string} POR Portuguese\n * @property {string} PUS Pushto; Pashto\n * @property {string} RON Romanian; Moldavian; Moldovan\n * @property {string} RUS Russian\n * @property {string} SAN Sanskrit\n * @property {string} SIN Sinhala; Sinhalese\n * @property {string} SLK Slovak\n * @property {string} SLV Slovenian\n * @property {string} SPA Spanish; Castilian\n * @property {string} SPA_OLD Spanish; Castilian - Old\n * @property {string} SQI Albanian\n * @property {string} SRP Serbian\n * @property {string} SRP_LATN Serbian - Latin\n * @property {string} SWA Swahili\n * @property {string} SWE Swedish\n * @property {string} SYR Syriac\n * @property {string} TAM Tamil\n * @property {string} TEL Telugu\n * @property {string} TGK Tajik\n * @property {string} TGL Tagalog\n * @property {string} THA Thai\n * @property {string} TIR Tigrinya\n * @property {string} TUR Turkish\n * @property {string} UIG Uighur; Uyghur\n * @property {string} UKR Ukrainian\n * @property {string} URD Urdu\n * @property {string} UZB Uzbek\n * @property {string} UZB_CYRL Uzbek - Cyrillic\n * @property {string} VIE Vietnamese\n * @property {string} YID Yiddish\n */\n\n/**\n  * @type {Languages}\n  */\nmodule.exports = {\n  AFR: 'afr',\n  AMH: 'amh',\n  ARA: 'ara',\n  ASM: 'asm',\n  AZE: 'aze',\n  AZE_CYRL: 'aze_cyrl',\n  BEL: 'bel',\n  BEN: 'ben',\n  BOD: 'bod',\n  BOS: 'bos',\n  BUL: 'bul',\n  CAT: 'cat',\n  CEB: 'ceb',\n  CES: 'ces',\n  CHI_SIM: 'chi_sim',\n  CHI_TRA: 'chi_tra',\n  CHR: 'chr',\n  CYM: 'cym',\n  DAN: 'dan',\n  DEU: 'deu',\n  DZO: 'dzo',\n  ELL: 'ell',\n  ENG: 'eng',\n  ENM: 'enm',\n  EPO: 'epo',\n  EST: 'est',\n  EUS: 'eus',\n  FAS: 'fas',\n  FIN: 'fin',\n  FRA: 'fra',\n  FRK: 'frk',\n  FRM: 'frm',\n  GLE: 'gle',\n  GLG: 'glg',\n  GRC: 'grc',\n  GUJ: 'guj',\n  HAT: 'hat',\n  HEB: 'heb',\n  HIN: 'hin',\n  HRV: 'hrv',\n  HUN: 'hun',\n  IKU: 'iku',\n  IND: 'ind',\n  ISL: 'isl',\n  ITA: 'ita',\n  ITA_OLD: 'ita_old',\n  JAV: 'jav',\n  JPN: 'jpn',\n  KAN: 'kan',\n  KAT: 'kat',\n  KAT_OLD: 'kat_old',\n  KAZ: 'kaz',\n  KHM: 'khm',\n  KIR: 'kir',\n  KOR: 'kor',\n  KUR: 'kur',\n  LAO: 'lao',\n  LAT: 'lat',\n  LAV: 'lav',\n  LIT: 'lit',\n  MAL: 'mal',\n  MAR: 'mar',\n  MKD: 'mkd',\n  MLT: 'mlt',\n  MSA: 'msa',\n  MYA: 'mya',\n  NEP: 'nep',\n  NLD: 'nld',\n  NOR: 'nor',\n  ORI: 'ori',\n  PAN: 'pan',\n  POL: 'pol',\n  POR: 'por',\n  PUS: 'pus',\n  RON: 'ron',\n  RUS: 'rus',\n  SAN: 'san',\n  SIN: 'sin',\n  SLK: 'slk',\n  SLV: 'slv',\n  SPA: 'spa',\n  SPA_OLD: 'spa_old',\n  SQI: 'sqi',\n  SRP: 'srp',\n  SRP_LATN: 'srp_latn',\n  SWA: 'swa',\n  SWE: 'swe',\n  SYR: 'syr',\n  TAM: 'tam',\n  TEL: 'tel',\n  TGK: 'tgk',\n  TGL: 'tgl',\n  THA: 'tha',\n  TIR: 'tir',\n  TUR: 'tur',\n  UIG: 'uig',\n  UKR: 'ukr',\n  URD: 'urd',\n  UZB: 'uzb',\n  UZB_CYRL: 'uzb_cyrl',\n  VIE: 'vie',\n  YID: 'yid',\n};\n","'use strict';\n\nconst isBrowser = require('./getEnvironment')('type') === 'browser';\n\nconst resolveURL = isBrowser ? s => (new URL(s, window.location.href)).href : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath', 'langPath'].forEach((key) => {\n    if (options[key]) {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n","'use strict';\n\nconst resolvePaths = require('./utils/resolvePaths');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const promises = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      // Using both `action` and `jobId` in case user provides non-unique `jobId`.\n      const promiseId = `${action}-${jobId}`;\n      promises[promiseId] = { resolve, reject };\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options: { lstmOnly: lstmOnlyCore, corePath: options.corePath, logging: options.logging } },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.DEFAULT, OEM.LSTM_ONLY].includes(currentOem)\n          && !options.legacyLang,\n      },\n    },\n  }));\n\n  const initializeInternal = (_langs, _oem, _config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs: _langs, oem: _oem, config: _config },\n    }))\n  );\n\n  const reinitialize = (langs = 'eng', oem, config, jobId) => { // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter((x) => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId)\n        .then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    text: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }));\n  };\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    const promiseId = `${action}-${jobId}`;\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      promises[promiseId].resolve({ jobId, data });\n      delete promises[promiseId];\n    } else if (status === 'reject') {\n      promises[promiseId].reject(data);\n      delete promises[promiseId];\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    reinitialize,\n    setParameters,\n    recognize,\n    detect,\n    terminate,\n  };\n\n  loadInternal()\n    .then(() => loadLanguageInternal(langs))\n    .then(() => initializeInternal(langs, oem, config))\n    .then(() => workerResResolve(resolveObj))\n    .catch(() => {});\n\n  return workerRes;\n};\n"],"names":["readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","_ref","target","error","code","Error","readAsArrayBuffer","loadImage","async","data","image","test","atob","split","map","c","charCodeAt","resp","fetch","arrayBuffer","HTMLElement","tagName","src","poster","toBlob","OffscreenCanvas","convertToBlob","File","Blob","Uint8Array","module","exports","createScheduler","require","createWorker","Tesseract","languages","OEM","PSM","setLogging","createJob","log","getId","schedulerCounter","id","workers","runningWorkers","jobQueue","getNumWorkers","Object","keys","length","dequeue","wIds","i","queue","action","payload","job","push","shift","w","apply","this","err","addWorker","addJob","_len","arguments","Array","_key","terminate","forEach","wid","getQueueLen","TESSERACT_ONLY","LSTM_ONLY","TESSERACT_LSTM_COMBINED","DEFAULT","prefix","cnt","Math","random","toString","slice","key","env","WorkerGlobalScope","type","document","process","recognize","langs","options","worker","finally","detect","version","defaultOptions","workerPath","spawnWorker","terminateWorker","onMessage","send","workerBlobURL","URL","Worker","createObjectURL","jobCounter","_id","_this","logging","_logging","args","console","OSD_ONLY","AUTO_OSD","AUTO_ONLY","AUTO","SINGLE_COLUMN","SINGLE_BLOCK_VERT_TEXT","SINGLE_BLOCK","SINGLE_LINE","SINGLE_WORD","CIRCLE_WORD","SINGLE_CHAR","SPARSE_TEXT","SPARSE_TEXT_OSD","RAW_LINE","handler","onmessage","packet","postMessage","logger","AFR","AMH","ARA","ASM","AZE","AZE_CYRL","BEL","BEN","BOD","BOS","BUL","CAT","CEB","CES","CHI_SIM","CHI_TRA","CHR","CYM","DAN","DEU","DZO","ELL","ENG","ENM","EPO","EST","EUS","FAS","FIN","FRA","FRK","FRM","GLE","GLG","GRC","GUJ","HAT","HEB","HIN","HRV","HUN","IKU","IND","ISL","ITA","ITA_OLD","JAV","JPN","KAN","KAT","KAT_OLD","KAZ","KHM","KIR","KOR","KUR","LAO","LAT","LAV","LIT","MAL","MAR","MKD","MLT","MSA","MYA","NEP","NLD","NOR","ORI","PAN","POL","POR","PUS","RON","RUS","SAN","SIN","SLK","SLV","SPA","SPA_OLD","SQI","SRP","SRP_LATN","SWA","SWE","SYR","TAM","TEL","TGK","TGL","THA","TIR","TUR","UIG","UKR","URD","UZB","UZB_CYRL","VIE","YID","resolveURL","s","window","location","href","opts","resolvePaths","workerCounter","undefined","oem","_options","config","errorHandler","promises","currentLangs","currentOem","currentConfig","lstmOnlyCore","includes","legacyCore","workerResReject","workerResResolve","workerRes","event","message","startJob","jobId","workerId","loadLanguageInternal","_langs","langPath","dataPath","cachePath","cacheMethod","gzip","lstmOnly","legacyLang","initializeInternal","_oem","_config","_ref2","status","promiseId","userJobId","resolveObj","load","warn","writeText","path","text","method","readText","encoding","removeFile","FS","reinitialize","filter","x","then","setParameters","params","output","corePath","catch"],"sourceRoot":""}