{"version":3,"file":"static/js/290.0d8143b6.chunk.js","mappings":"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","sources":["lib/optimizerCore.js","workers/optimizer.worker.js"],"sourcesContent":["// src/lib/optimizerCore.js\r\n/* =============================== 타입(주석용 정의) =============================== */\r\n/** @typedef {\"dealer\"|\"support\"} Role */\r\n/** @typedef {\"atk\"|\"add\"|\"boss\"|\"brand\"|\"allyDmg\"|\"allyAtk\"} OptionKey */\r\n/** @typedef {\"HERO\"|\"LEGEND\"|\"RELIC\"|\"ANCIENT\"} CoreGrade */\r\n/** @typedef {{id:string, will:number|null, point:number|null, o1k:OptionKey, o1v:number|null, o2k:OptionKey, o2v:number|null}} Gem */\r\n/** @typedef {{[k in OptionKey]: number}} Weights */\r\n/** @typedef {{ id:string, name:string, grade:CoreGrade, minThreshold?:number, enforceMin:boolean }} CoreDef */\r\n/** @typedef {{ list: Gem[], totalWill:number, totalPoint:number, thr:number[], roleSum:number, score:number }} ComboInfo */\r\n\r\n/* =============================== 상수 정의 =============================== */\r\nexport const CORE_SUPPLY = { HERO: 7, LEGEND: 11, RELIC: 15, ANCIENT: 17 };\r\nexport const CORE_THRESHOLDS = {\r\n  HERO: [10],\r\n  LEGEND: [10, 14],\r\n  RELIC: [10, 14, 17, 18, 19, 20],\r\n  ANCIENT: [10, 14, 17, 18, 19, 20],\r\n};\r\nexport const CORE_LABEL = { HERO: \"영웅\", LEGEND: \"전설\", RELIC: \"유물\", ANCIENT: \"고대\" };\r\nexport const GRADES = [\"HERO\", \"LEGEND\", \"RELIC\", \"ANCIENT\"];\r\nexport const OPTION_LABELS = {\r\n  atk: \"공격력\",\r\n  add: \"추가 피해\",\r\n  boss: \"보스 피해\",\r\n  brand: \"낙인력\",\r\n  allyDmg: \"아군 피해 강화\",\r\n  allyAtk: \"아군 공격 강화\",\r\n};\r\nexport const OPTIONS = [\"atk\", \"add\", \"boss\", \"brand\", \"allyDmg\", \"allyAtk\"];\r\nexport const ROLE_KEYS = {\r\n  dealer: new Set([\"atk\", \"add\", \"boss\"]),\r\n  support: new Set([\"brand\", \"allyDmg\", \"allyAtk\"]),\r\n};\r\n\r\n/** 딜러 프리셋(가중치; 배율) */\r\nexport const DEALER_WEIGHTS = {\r\n  boss: 1,\r\n  add: 1,\r\n  atk: 1,\r\n  brand: 0,\r\n  allyDmg: 0,\r\n  allyAtk: 0,\r\n};\r\n/** 기본 가중치는 = 딜러 프리셋 */\r\nexport const DEFAULT_WEIGHTS = { ...DEALER_WEIGHTS };\r\n\r\n/** 딜러: 옵션 레벨 → 퍼센트 커브 */\r\nexport const DEALER_LEVEL_CURVES = {\r\n  // key 는 OPTIONS 의 실제 키와 일치해야 합니다.\r\n  boss: [0, 0.078, 0.156, 0.244, 0.313, 0.391], // 보스 피해\r\n  add:  [0, 0.060, 0.119, 0.187, 0.239, 0.299], // 추가 피해\r\n  atk:  [0, 0.029, 0.067, 0.105, 0.134, 0.172], // 공격력\r\n};\r\n\r\n/* =============================== 유틸/헬퍼 =============================== */\r\nexport function roleAllowsKey(role, key) {\r\n  const allow = ROLE_KEYS?.[role];\r\n  if (!allow) return true;                               // 미정의면 모두 허용\r\n  if (Array.isArray(allow)) return allow.includes(key);  // 배열\r\n  if (allow && typeof allow.has === 'function') return allow.has(key); // Set\r\n  if (allow && typeof allow === 'object') return !!allow[key]; // { atk:true } 객체\r\n  return true;\r\n}\r\n\r\nexport function sanitizeWeights(w) {\r\n  const base = { ...DEFAULT_WEIGHTS };\r\n  if (!w) return base;\r\n  Object.keys(base).forEach((k) => {\r\n    const raw = w[k];\r\n    const num = typeof raw === 'number' ? raw : Number(raw);\r\n    base[k] = Number.isFinite(num) && num >= 0 ? num : DEFAULT_WEIGHTS[k];\r\n  });\r\n  return /** @type {Weights} */(base);\r\n}\r\n\r\nexport function levelValueByRole(role, key, lvl) {\r\n  const L = Math.max(0, Math.min(5, Number(lvl) || 0));\r\n  if (role === 'dealer' && DEALER_LEVEL_CURVES[key]) {\r\n    return DEALER_LEVEL_CURVES[key][L] || 0;\r\n  }\r\n  // 서포터(및 그 외): 선형 — 레벨 숫자 자체를 퍼센트로 사용\r\n  return L;\r\n}\r\n\r\nexport function scoreGemForRole(gem, role, weights) {\r\n  const w = sanitizeWeights(weights || {});\r\n  let sum = 0;\r\n\r\n  const add = (key, lvl) => {\r\n    if (!key || !lvl) return;\r\n    if (role && !roleAllowsKey(role, key)) return;\r\n\r\n    const basePct = levelValueByRole(role, key, lvl); // 레벨→퍼센트(커브/선형)\r\n    const scale   = w[key] ?? 0;                      // 가중치(배율)\r\n    sum += basePct * scale;\r\n  };\r\n\r\n  add(gem.o1k, gem.o1v);\r\n  add(gem.o2k, gem.o2v);\r\n\r\n  // 퍼센트 값으로 반환 (상위 UI에서 toFixed(4) + '%' 처리)\r\n  return sum;\r\n}\r\n\r\nexport function* combinations(arr, k) {\r\n  const n = arr.length; if (k > n) return;\r\n  const idx = Array.from({ length: k }, (_, i) => i);\r\n  while (true) {\r\n    yield idx.map(i => arr[i]);\r\n    let p = k - 1;\r\n    while (p >= 0 && idx[p] === n - k + p) p--;\r\n    if (p < 0) break;\r\n    idx[p]++;\r\n    for (let j = p + 1; j < k; j++) idx[j] = idx[j - 1] + 1;\r\n  }\r\n}\r\n\r\nexport function thresholdsHit(grade, totalPoint) {\r\n  const th = CORE_THRESHOLDS[grade];\r\n  return th.filter(t => totalPoint >= t);\r\n}\r\n\r\nexport function scoreCombo(combo, grade, role, weights) {\r\n  const totalWill = combo.reduce((s, g) => s + ((g.will ?? 0)), 0);\r\n  const totalPoint = combo.reduce((s, g) => s + ((g.point ?? 0)), 0);\r\n  const thr = thresholdsHit(grade, totalPoint);\r\n  const roleSum = combo.reduce((s, g) => s + scoreGemForRole(g, role, weights), 0);\r\n  const score = (thr.length * 10_000_000)\r\n    + (totalPoint * 10_000)\r\n    + ((5_000 - totalWill) * 10)\r\n    + roleSum\r\n    - combo.length;\r\n  return { totalWill, totalPoint, thr, roleSum, score };\r\n}\r\n\r\n/* 단일 코어 후보 산출 (통일 정책: 달성 구간이 없으면 결과 없음) */\r\nexport function enumerateCoreCombos(pool, grade, role, weights, minThreshold, enforceMin, onStep) {\r\n  const supply = CORE_SUPPLY[grade];\r\n  const W = sanitizeWeights(weights);\r\n\r\n  /** @type {ComboInfo[]} */\r\n  const all = [];\r\n  const maxPick = Math.min(4, pool.length);\r\n\r\n  for (let k = 0; k <= maxPick; k++) {\r\n    if (k === 0) {\r\n      all.push({ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 });\r\n      continue;\r\n    }\r\n    for (const combo of combinations(pool, k)) {\r\n      onStep && onStep(1);\r\n      const totalWill = combo.reduce((s, g) => s + (g.will || 0), 0);\r\n      if (totalWill > supply) continue;\r\n      const { totalPoint, thr, roleSum, score } = scoreCombo(combo, grade, role, W);\r\n      all.push({ list: combo, totalWill, totalPoint, thr, roleSum, score });\r\n    }\r\n  }\r\n\r\n  all.sort((a, b) => b.score - a.score);\r\n\r\n  // UI 정책에 맞춘 필터링\r\n  let filtered;\r\n\r\n  if (enforceMin) {\r\n    // '이상 탐색' 모드 (체크박스 ON)\r\n    const minOfGrade = Math.min(...CORE_THRESHOLDS[grade]);\r\n    const effMin = minThreshold ?? minOfGrade; // 목표가 없으면 등급 최소치\r\n    filtered = all.filter(ci =>\r\n      ci.totalPoint >= effMin && ci.thr.length > 0 && ci.list.length > 0\r\n    );\r\n  } else {\r\n    // '정확히 일치' 모드 (체크박스 OFF, 기본)\r\n    if (minThreshold != null) {\r\n      filtered = all.filter(ci =>\r\n        ci.totalPoint === minThreshold && ci.list.length > 0\r\n      );\r\n    } else {\r\n      // 목표 없음: 달성 구간 있는 케이스만\r\n      filtered = all.filter(ci => ci.thr.length > 0 && ci.list.length > 0);\r\n    }\r\n  }\r\n\r\n  if (filtered.length === 0) {\r\n    return [{ list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 }];\r\n  }\r\n\r\n  return filtered;\r\n}\r\n","// src/workers/optimizer.worker.js\r\n/* eslint-env worker, es2020 */\r\nimport { enumerateCoreCombos, CORE_THRESHOLDS, sanitizeWeights } from \"../lib/optimizerCore.js\";\r\n\r\nconst thrMax = (ci) => (ci?.thr?.length ? Math.max(...ci.thr) : 0);\r\nconst minOf = (g) => Math.min(...CORE_THRESHOLDS[g]);\r\nconst now = () => (globalThis.performance?.now?.() ?? Date.now());\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nfunction clash(pick, usedSet) {\r\n  for (const g of pick.list) if (usedSet.has(g.id)) return true;\r\n  return false;\r\n}\r\n\r\n// emit을 너무 자주 보내지 않도록 간단 throttle\r\nfunction makeThrottledEmit(emit, minMs = 16) {\r\n  let last = 0;\r\n  return (payload, force = false) => {\r\n    const t = now();\r\n    if (force || t - last >= minMs) {\r\n      last = t;\r\n      emit(payload);\r\n    }\r\n  };\r\n}\r\n\r\n// 정렬 comparator를 루프 밖으로 (ESLint 안정성/성능)\r\nconst comboCmp = (a, b) => {\r\n  const ta = thrMax(a), tb = thrMax(b);\r\n  if (ta !== tb) return tb - ta;\r\n  if (a.totalPoint !== b.totalPoint) return b.totalPoint - a.totalPoint;\r\n  if (a.roleSum !== b.roleSum) return b.roleSum - a.roleSum;\r\n  return a.totalWill - b.totalWill;\r\n};\r\n\r\n/**\r\n* 후보 생성: 코어별로 프레임 양보하면서 진행 브로드캐스트\r\n* - gen 단계는 전체 후보 조합 수를 알 수 있으니 **결정형 퍼센트(done/total)** 제공\r\n* - 동시에 코어별 상세(코어 n/m, x/y, 속도/ETA)도 함께 전송\r\n*/\r\nasync function buildAllCandidates({ cores, pool, role, weights, perCoreLimit, emitOverall }) {\r\n  const n = pool.length;\r\n  const maxPick = Math.min(4, n);\r\n\r\n  const nCk = (N, K) => {\r\n    let c = 1;\r\n    for (let i = 1; i <= K; i++) c = (c * (N - i + 1)) / i;\r\n    return Math.floor(c);\r\n  };\r\n\r\n  // 한 코어당 이론상 생성할 조합 개수(1~4개 선택 합)\r\n  const totalCombosPerCore = Array.from({ length: maxPick }, (_, i) => nCk(n, i + 1))\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  // 전체(gen) 퍼센트용 총량\r\n  const totalGenAll = totalCombosPerCore * cores.length;\r\n\r\n  let doneCombos = 0;\r\n  const candidatesPerCore = [];\r\n\r\n  const state = {\r\n    coreIndex: 0,\r\n    coreCount: cores.length,\r\n    coreDone: 0,\r\n    coreTotal: 0,\r\n    t0: 0,\r\n  };\r\n\r\n  // 루프 밖 단일 onTick (ESLint no-loop-func 대응)\r\n  const onTick = () => {\r\n    // 전역(doneCombos) & 코어별 진행 증가\r\n    doneCombos += 1;\r\n    state.coreDone += 1;\r\n\r\n    const elapsedMs = now() - state.t0;\r\n    const showSpeed = elapsedMs >= 250 && state.coreDone >= Math.min(1000, state.coreTotal * 0.05);\r\n    const rate = showSpeed ? (state.coreDone / (elapsedMs / 1000)) : null;\r\n    const etaMs = showSpeed && rate ? Math.max(0, (state.coreTotal - state.coreDone) / rate) * 1000 : null;\r\n\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${cores[state.coreIndex - 1]?.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,        // ✅ 결정형\r\n      done: doneCombos,          // ✅ 전체(gen) 진행수\r\n      total: totalGenAll,         // ✅ 전체(gen) 총량\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal,\r\n      rate, elapsedMs, etaMs\r\n    });\r\n  };\r\n\r\n  // 코어별로 순차 생성 + 프레임 양보\r\n  for (let idx = 0; idx < cores.length; idx++) {\r\n    const core = cores[idx];\r\n\r\n    state.coreIndex = idx + 1;\r\n    state.coreDone = 0;\r\n    state.coreTotal = totalCombosPerCore; // 동일 풀 기준 이론 총량\r\n    state.t0 = now();\r\n\r\n    // 시작 알림 (렌더 기회) — 결정형 퍼센트 0%에서 시작\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreDone,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n\r\n    const list = enumerateCoreCombos(\r\n       pool, core.grade, role, weights, core.minThreshold, core.enforceMin, onTick\r\n    )\r\n      .filter((ci) => ci.list.length > 0 && ci.thr.length > 0)\r\n      .sort(comboCmp)\r\n      .slice(0, perCoreLimit);\r\n\r\n    candidatesPerCore[idx] = list;\r\n\r\n    // 코어 종료 스냅샷(강제 1회) + 프레임 양보\r\n    emitOverall?.({\r\n      type: \"progress\",\r\n      phase: \"gen\",\r\n      label: `후보 생성 중… (${core.name || `코어 ${state.coreIndex}`})`,\r\n      indeterminate: false,\r\n      done: doneCombos,\r\n      total: totalGenAll,\r\n      coreIndex: state.coreIndex,\r\n      coreCount: state.coreCount,\r\n      coreDone: state.coreTotal,\r\n      coreTotal: state.coreTotal\r\n    }, true);\r\n    await sleep(0);\r\n  }\r\n\r\n  return { candidatesPerCore, totalGenAll, doneCombos };\r\n}\r\n\r\n/**\r\n* 최적 배치 탐색 (개선된 Fallback 로직 적용)\r\n* - 비결정형으로 진행하되, 매 브로드캐스트마다 **pulse(카운터)** 를 증가시켜 탐색량을 시각화\r\n*/\r\nasync function solveWithAdvancedFallback({ cores, pool, role, weights, perCoreLimit, emit }) {\r\n  const order = cores.map((_, i) => i);\r\n  const throttled = makeThrottledEmit(emit, 24);\r\n\r\n  // 1) 후보 생성\r\n  const { candidatesPerCore } = await buildAllCandidates({\r\n    cores, pool, role, weights, perCoreLimit, emitOverall: throttled,\r\n  });\r\n  const allCandidates = candidatesPerCore;\r\n\r\n  // 2) 탐색 준비\r\n  let pulse = 0;\r\n  const emitSearchProgress = (force = false) => {\r\n    pulse++;\r\n    throttled({\r\n      type: \"progress\",\r\n      phase: \"search\",\r\n      label: \"최적 배치 탐색 중…\",\r\n      indeterminate: true,\r\n      pulse\r\n    }, force);\r\n  };\r\n  emitSearchProgress(true); // 탐색 시작 알림 (pulse 1)\r\n\r\n  // 3) 탐색 로직 (백트래킹)\r\n  const emptyPick = { list: [], totalWill: 0, totalPoint: 0, thr: [], roleSum: 0, score: 0 };\r\n  const betterThan = (A, B) => {\r\n    if (!B) return true;\r\n    if (A.sumThr !== B.sumThr) return A.sumThr > B.sumThr;\r\n    for (let i = 0; i < A.thrVec.length; i++) if (A.thrVec[i] !== B.thrVec[i]) return A.thrVec[i] > B.thrVec[i];\r\n    if (A.sumPoint !== B.sumPoint) return A.sumPoint > B.sumPoint;\r\n    for (let i = 0; i < A.ptVec.length; i++) if (A.ptVec[i] !== B.ptVec[i]) return A.ptVec[i] > B.ptVec[i];\r\n    if (A.roleSum !== B.roleSum) return A.roleSum > B.roleSum;\r\n    if (A.sumWill !== B.sumWill) return A.sumWill < B.sumWill;\r\n    return false;\r\n  };\r\n\r\n  // 백트래킹 솔버\r\n  function trySolve(enforceSet, blockedSet = new Set()) {\r\n    let best = null;\r\n    const used = new Set();\r\n\r\n    function backtrack(pos, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec) {\r\n      emitSearchProgress();\r\n\r\n      if (pos === order.length) {\r\n        for (const idx of enforceSet) {\r\n          const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n          const t = thrMax(picksAcc[idx]);\r\n          if (t < effMin) return;\r\n        }\r\n        const cand = {\r\n          picks: picksAcc.map(x => x),\r\n          sumThr: sumThrAcc, sumPoint: sumPointAcc, sumWill: sumWillAcc, roleSum: roleSumAcc,\r\n          thrVec: thrVec.slice(), ptVec: ptVec.slice(),\r\n        };\r\n        if (betterThan(cand, best)) best = cand;\r\n        return;\r\n      }\r\n\r\n      const coreIdx = order[pos];\r\n      const isEnf = enforceSet.has(coreIdx);\r\n      const effMin = isEnf ? (cores[coreIdx].minThreshold ?? minOf(cores[coreIdx].grade)) : -Infinity;\r\n\r\n      if (blockedSet.has(coreIdx)) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n        return;\r\n      }\r\n\r\n      const candList = allCandidates[pos] || [];\r\n      for (const pick of candList) {\r\n        const t = thrMax(pick);\r\n        if (isEnf && t < effMin) continue;\r\n        if (clash(pick, used)) continue;\r\n\r\n        pick.list.forEach(g => used.add(g.id));\r\n        const prev = picksAcc[coreIdx];\r\n        picksAcc[coreIdx] = pick;\r\n        thrVec[pos] = t;\r\n        ptVec[pos] = pick.totalPoint;\r\n\r\n        backtrack(pos + 1, picksAcc, sumThrAcc + t, sumPointAcc + pick.totalPoint, sumWillAcc + pick.totalWill, roleSumAcc + pick.roleSum, thrVec, ptVec);\r\n\r\n        pick.list.forEach(g => used.delete(g.id));\r\n        picksAcc[coreIdx] = prev;\r\n        thrVec[pos] = 0;\r\n        ptVec[pos] = 0;\r\n      }\r\n\r\n      if (!isEnf) {\r\n        backtrack(pos + 1, picksAcc, sumThrAcc, sumPointAcc, sumWillAcc, roleSumAcc, thrVec, ptVec);\r\n      }\r\n    }\r\n\r\n    backtrack(0, cores.map(() => emptyPick), 0, 0, 0, 0, Array(order.length).fill(0), Array(order.length).fill(0));\r\n    return best;\r\n  }\r\n\r\n  // --- 메인 해결 로직 (Fallback 적용) ---\r\n  const enforcedIdx = cores.map((c, i) => (c.enforceMin ? i : -1)).filter(i => i !== -1);\r\n\r\n  // 1) 전체 강제조건을 만족하는 해 시도\r\n  const enforcedSetFull = new Set(enforcedIdx);\r\n  const bestFull = trySolve(enforcedSetFull);\r\n  if (bestFull) {\r\n    return { picks: bestFull.picks };\r\n  }\r\n\r\n  // 2) 1번 실패 시, 최하위 우선순위 코어를 포기하고 재시도\r\n  if (order.length > 0) {\r\n    const lowestIdx = order[order.length - 1];\r\n    // 최하위 코어가 강제 대상이었을 때만 의미가 있음\r\n    if (enforcedSetFull.has(lowestIdx)) {\r\n      const enforcedMinusLowest = new Set([...enforcedSetFull].filter(i => i !== lowestIdx));\r\n      const bestDropLowest = trySolve(enforcedMinusLowest, new Set([lowestIdx]));\r\n      if (bestDropLowest) {\r\n        const finalPicks = bestDropLowest.picks.map((p, i) => (i === lowestIdx ? emptyPick : (p || emptyPick)));\r\n        return { picks: finalPicks };\r\n      }\r\n    }\r\n  }\r\n\r\n  // 3) 그래도 실패 시: 애초에 달성 불가능한 강제 조건이 있는지 판별\r\n  const infeasibleEnforced = new Set();\r\n  for (const idx of enforcedIdx) {\r\n    const effMin = (cores[idx].minThreshold ?? minOf(cores[idx].grade));\r\n    const pos = order.indexOf(idx);\r\n    const hasFeasibleCandidate = (allCandidates[pos] || []).some(ci => thrMax(ci) >= effMin);\r\n    if (!hasFeasibleCandidate) {\r\n      infeasibleEnforced.add(idx);\r\n    }\r\n  }\r\n\r\n  // 4) 달성 가능한 강제 조건만 걸고 재시도\r\n  const enforcedSetReduced = new Set(enforcedIdx.filter(i => !infeasibleEnforced.has(i)));\r\n  const bestReduced = trySolve(enforcedSetReduced);\r\n\r\n  if (bestReduced) {\r\n    // 불가능했던 코어는 결과 없음 처리\r\n    const finalPicks = bestReduced.picks.map((p, i) => (infeasibleEnforced.has(i) ? emptyPick : (p || emptyPick)));\r\n    return { picks: finalPicks };\r\n  }\r\n\r\n  // 5) 최종 안전망\r\n  return { picks: cores.map(() => emptyPick) };\r\n}\r\n\r\n\r\nglobalThis.onmessage = async (e) => {\r\n  const { type = \"run\", cores, gems, role, weights, perCoreLimit } = e.data;\r\n  const emit = (msg) => globalThis.postMessage(msg);\r\n\r\n  try {\r\n    if (type === \"kickoff\") {\r\n      // 워밍업만 수행하고 UI 갱신은 하지 않음\r\n      return;\r\n    }\r\n\r\n    const result = await solveWithAdvancedFallback({\r\n      cores,\r\n      pool: gems,\r\n      role,\r\n      weights: sanitizeWeights(weights),\r\n      perCoreLimit,\r\n      emit,\r\n    });\r\n\r\n    emit({ type: \"result\", ...result });\r\n  } catch (err) {\r\n    console.error(\"Worker error:\", err);\r\n    emit({ type: \"error\", error: String(err?.message || err) });\r\n  }\r\n};"],"names":["CORE_SUPPLY","HERO","LEGEND","RELIC","ANCIENT","CORE_THRESHOLDS","ROLE_KEYS","dealer","Set","support","DEFAULT_WEIGHTS","boss","add","atk","brand","allyDmg","allyAtk","DEALER_LEVEL_CURVES","sanitizeWeights","w","base","Object","keys","forEach","k","raw","num","Number","isFinite","scoreGemForRole","gem","role","weights","sum","key","lvl","_w$key","allow","Array","isArray","includes","has","roleAllowsKey","basePct","L","Math","max","min","levelValueByRole","scale","o1k","o1v","o2k","o2v","combinations","arr","n","length","idx","from","_","i","map","p","j","scoreCombo","combo","grade","totalWill","reduce","s","g","_g$will","will","totalPoint","_g$point","point","thr","filter","t","thresholdsHit","roleSum","score","enumerateCoreCombos","pool","minThreshold","enforceMin","onStep","supply","W","all","maxPick","push","list","filtered","sort","a","b","minOfGrade","effMin","ci","thrMax","_ci$thr","minOf","now","_globalThis$performan","_globalThis$performan2","_globalThis$performan3","globalThis","performance","call","Date","sleep","ms","Promise","r","setTimeout","clash","pick","usedSet","id","comboCmp","ta","tb","async","buildAllCandidates","_ref","cores","perCoreLimit","emitOverall","totalCombosPerCore","nCk","N","K","c","floor","totalGenAll","doneCombos","candidatesPerCore","state","coreIndex","coreCount","coreDone","coreTotal","t0","onTick","_cores","elapsedMs","showSpeed","rate","etaMs","type","phase","label","name","indeterminate","done","total","core","slice","solveWithAdvancedFallback","_ref2","emit","order","throttled","minMs","arguments","undefined","last","payload","force","makeThrottledEmit","allCandidates","pulse","emitSearchProgress","emptyPick","trySolve","enforceSet","blockedSet","best","used","backtrack","pos","picksAcc","sumThrAcc","sumPointAcc","sumWillAcc","roleSumAcc","thrVec","ptVec","_cores$coreIdx$minThr","_cores$idx$minThresho","cand","picks","x","sumThr","sumPoint","sumWill","betterThan","A","B","coreIdx","isEnf","Infinity","candList","prev","delete","fill","enforcedIdx","enforcedSetFull","bestFull","lowestIdx","bestDropLowest","infeasibleEnforced","_cores$idx$minThresho2","indexOf","some","bestReduced","onmessage","gems","e","data","msg","postMessage","err","console","error","String","message"],"sourceRoot":""}